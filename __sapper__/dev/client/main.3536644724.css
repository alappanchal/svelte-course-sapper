main.svelte-e906z6{margin-top:5rem}
h1.svelte-8od9u6,p.svelte-8od9u6{margin:0 auto}h1.svelte-8od9u6{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-8od9u6{margin:1em auto}@media(min-width: 480px){h1.svelte-8od9u6{font-size:4em}}
#meetups.svelte-1bgku22{width:100%;display:grid;grid-template-columns:1fr;grid-gap:1rem}#meetup-controls.svelte-1bgku22{margin:1rem;display:flex;justify-content:space-between}@media(min-width: 768px){#meetups.svelte-1bgku22{grid-template-columns:repeat(2, 1fr)}}.no-message.svelte-1bgku22{margin:1rem}
section.svelte-11gfc6t{margin-top:4rem}.image.svelte-11gfc6t{width:100%;height:25rem}img.svelte-11gfc6t{width:100%;height:100%;object-fit:cover}.image.svelte-11gfc6t{background:#e7e7e7}.content.svelte-11gfc6t{text-align:center;width:80%;margin:auto}h1.svelte-11gfc6t{font-size:2rem;font-family:'Roboto Slab', sans-serif;margin:0.5rem 0}h2.svelte-11gfc6t{font-size:1.25rem;color:#6b6b6b}p.svelte-11gfc6t{font-size:1.5rem}
header.svelte-6b0383{position:fixed;width:100%;top:0;left:0;height:4rem;background-color:#cf0056;display:flex;justify-content:center;align-items:center;box-shadow:0 2px 6px rgba(0,0,0,0.26)}h1.svelte-6b0383{font-family:'Roboto slab',serif;color:#fff;margin:0}
.loadingContainer.svelte-6kkc0y.svelte-6kkc0y{display:flex;align-items:center;justify-content:center;margin:2rem;height:50vh}.loadingContainer.svelte-6kkc0y p.svelte-6kkc0y{display:block;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);color:#cf0056
    }.lds-default.svelte-6kkc0y.svelte-6kkc0y{display:inline-block;position:relative;width:80px;height:80px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y{position:absolute;width:6px;height:6px;background:#cf0056;border-radius:50%;animation:svelte-6kkc0y-lds-default 1.2s linear infinite}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(1){animation-delay:0s;top:37px;left:66px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(2){animation-delay:-0.1s;top:22px;left:62px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(3){animation-delay:-0.2s;top:11px;left:52px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(4){animation-delay:-0.3s;top:7px;left:37px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(5){animation-delay:-0.4s;top:11px;left:22px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(6){animation-delay:-0.5s;top:22px;left:11px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(7){animation-delay:-0.6s;top:37px;left:7px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(8){animation-delay:-0.7s;top:52px;left:11px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(9){animation-delay:-0.8s;top:62px;left:22px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(10){animation-delay:-0.9s;top:66px;left:37px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(11){animation-delay:-1s;top:62px;left:52px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(12){animation-delay:-1.1s;top:52px;left:62px}@keyframes svelte-6kkc0y-lds-default{0%,20%,80%,100%{transform:scale(1)}50%{transform:scale(1.5)}}
button.svelte-drewlc,a.svelte-drewlc{font:inherit;border:1px solid #cf0056;background:#cf0056;padding:0.5rem 1rem;color:white;border-radius:5px;box-shadow:1px 1px 3px rgba(0, 0, 0, 0.26);cursor:pointer;text-decoration:none;width:120px}button.svelte-drewlc:focus{outline:none}button.svelte-drewlc:hover,button.svelte-drewlc:active,a.svelte-drewlc:hover,a.svelte-drewlc:active{background:#e40763;border-color:#e40763;box-shadow:1px 1px 8px rgba(77, 51, 51, 0.26)}button.svelte-drewlc:disabled,button.svelte-drewlc:disabled:hover,button.svelte-drewlc:disabled:active{background:#ccc;border-color:#ccc;color:#959595;box-shadow:none;cursor:not-allowed}.success.svelte-drewlc{background:#01a129;border-color:#01a129}.success.svelte-drewlc:hover,.success.svelte-drewlc:active{background:#1ac745;border-color:#1ac745}.outline.svelte-drewlc{background:transparent;color:#cf0056;box-shadow:none}.outline.svelte-drewlc:hover,.outline.svelte-drewlc:active{background:#ffc7de;box-shadow:none}.outline.svelte-drewlc:disabled,.outline.svelte-drewlc:disabled:hover,.outline.svelte-drewlc:disabled:active{background:transparent;color:#ccc}.outline.success.svelte-drewlc{border-color:#01a129;color:#01a129}.outline.success.svelte-drewlc:hover,.outline.success.svelte-drewlc:active{background:#c2ffd1}
article.svelte-ys5sx3.svelte-ys5sx3{box-shadow:0 2px 8px rgba(0, 0, 0, 0.26);border-radius:5px;background:white;margin:1rem}header.svelte-ys5sx3.svelte-ys5sx3,.content.svelte-ys5sx3.svelte-ys5sx3,footer.svelte-ys5sx3.svelte-ys5sx3{padding:1rem}.image.svelte-ys5sx3.svelte-ys5sx3{width:100%;height:14rem}.image.svelte-ys5sx3 img.svelte-ys5sx3{width:100%;height:100%;object-fit:cover}h1.svelte-ys5sx3.svelte-ys5sx3{font-size:1.25rem;margin:0.5rem 0;font-family:"Roboto Slab", sans-serif}h2.svelte-ys5sx3.svelte-ys5sx3{font-size:1rem;color:#808080;margin:0.5rem 0}p.svelte-ys5sx3.svelte-ys5sx3{font-size:1.25rem;margin:0}div.svelte-ys5sx3.svelte-ys5sx3{text-align:right}.content.svelte-ys5sx3.svelte-ys5sx3{height:4rem;;}
form.svelte-7xgq1w{width:100%}
div.svelte-1iaz0ri{font-size:0px}button.svelte-1iaz0ri{background:#aaaaaa;font:inherit;font-size:1rem;cursor:pointer;border:1px solid #aaaaaa;padding:0.5rem 1rem}button.svelte-1iaz0ri:focus{outline:none}button.svelte-1iaz0ri:first-of-type{border-radius:5px 0 0 5px}button.svelte-1iaz0ri:last-of-type{border-radius:0 5px 5px 0}button.svelte-1iaz0ri:hover,button.svelte-1iaz0ri:active,.active.svelte-1iaz0ri{background:#cf0056;border-color:#cf0056;color:white}
input.svelte-sc5id5,textarea.svelte-sc5id5{display:block;width:100%;font:inherit;border:none;border-bottom:2px solid #ccc;border-radius:3px 3px 0 0;background:white;padding:0.15rem 0.25rem;transition:border-color 0.1s ease-out}input.svelte-sc5id5:focus,textarea.svelte-sc5id5:focus{border-color:#e40763;outline:none}label.svelte-sc5id5{display:block;margin-bottom:0.5rem;width:100%}.form-control.svelte-sc5id5{padding:0.5rem 0;width:100%;margin:0.25rem 0}.invalid.svelte-sc5id5{border:1px solid #f00;background-color:#fde3e3}.error-message.svelte-sc5id5{color:#f00;margin:0.25rem 0}
.modal-backdrop.svelte-utgw0y{position:fixed;top:0;left:0;width:100%;height:100vh;background:rgba(0, 0, 0, 0.75);z-index:10}.modal.svelte-utgw0y{position:fixed;top:10vh;left:10%;width:80%;max-height:80vh;background:white;border-radius:5px;z-index:100;box-shadow:0 2px 8px rgba(0, 0, 0, 0.26);overflow:scroll}h1.svelte-utgw0y{padding:1rem;margin:0;border-bottom:1px solid #ccc;font-family:'Roboto Slab', sans-serif}.content.svelte-utgw0y{padding:1rem}footer.svelte-utgw0y{padding:1rem}@media(min-width: 768px){.modal.svelte-utgw0y{width:40rem;left:calc(50% - 20rem)}}
span.svelte-pdghry{display:inline-block;margin:0 0.25rem;border-radius:3px;border:1px solid #cf0056 ;background-color:#cf0056;color:#fff;padding:0 0.5rem;font-family:'Lato', sans-serif;font-size:0.8rem}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi4zNTM2NjQ0NzI0LmNzcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vX2xheW91dC5zdmVsdGUiLCIuLi8uLi8uLi9fZXJyb3Iuc3ZlbHRlIiwiLi4vLi4vLi4vaW5kZXguc3ZlbHRlIiwiLi4vLi4vLi4vW2lkXS5zdmVsdGUiLCIuLi8uLi8uLi9IZWFkZXIuc3ZlbHRlIiwiLi4vLi4vLi4vTG9hZGluZ1NwaW5uZXIuc3ZlbHRlIiwiLi4vLi4vLi4vQnV0dG9uLnN2ZWx0ZSIsIi4uLy4uLy4uL01lZXR1cEl0ZW0uc3ZlbHRlIiwiLi4vLi4vLi4vRWRpdE1lZXR1cC5zdmVsdGUiLCIuLi8uLi8uLi9GaWx0ZXJlZE1lZXR1cC5zdmVsdGUiLCIuLi8uLi8uLi9UZXh0SW5wdXQuc3ZlbHRlIiwiLi4vLi4vLi4vTW9kYWwuc3ZlbHRlIiwiLi4vLi4vLi4vQmFkZ2Uuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG5cdGltcG9ydCBIZWFkZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvVUkvSGVhZGVyLnN2ZWx0ZVwiO1xuXHQvLyBleHBvcnQgbGV0IHNlZ21lbnQ7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuXHQgbWFpbntcbiAgICAgICAgbWFyZ2luLXRvcDogNXJlbTtcbiAgICB9IFx0XG48L3N0eWxlPlxuXG48IS0tIEhlYWRlciBDb21wb25lbnQgLS0+XG48SGVhZGVyIC8+XG5cbjxtYWluPlxuXHQ8c2xvdD48L3Nsb3Q+XG48L21haW4+IiwiPHNjcmlwdD5cblx0ZXhwb3J0IGxldCBzdGF0dXM7XG5cdGV4cG9ydCBsZXQgZXJyb3I7XG5cblx0Y29uc3QgZGV2ID0gXCJkZXZlbG9wbWVudFwiID09PSAnZGV2ZWxvcG1lbnQnO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cblx0aDEsIHAge1xuXHRcdG1hcmdpbjogMCBhdXRvO1xuXHR9XG5cblx0aDEge1xuXHRcdGZvbnQtc2l6ZTogMi44ZW07XG5cdFx0Zm9udC13ZWlnaHQ6IDcwMDtcblx0XHRtYXJnaW46IDAgMCAwLjVlbSAwO1xuXHR9XG5cblx0cCB7XG5cdFx0bWFyZ2luOiAxZW0gYXV0bztcblx0fVxuXG5cdEBtZWRpYSAobWluLXdpZHRoOiA0ODBweCkge1xuXHRcdGgxIHtcblx0XHRcdGZvbnQtc2l6ZTogNGVtO1xuXHRcdH1cblx0fVxuPC9zdHlsZT5cblxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+e3N0YXR1c308L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPGgxPntzdGF0dXN9PC9oMT5cblxuPHA+e2Vycm9yLm1lc3NhZ2V9PC9wPlxuXG57I2lmIGRldiAmJiBlcnJvci5zdGFja31cblx0PHByZT57ZXJyb3Iuc3RhY2t9PC9wcmU+XG57L2lmfVxuIiwiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gcHJlbG9hZChwYWdlKXtcclxuICAgICAgICAvL2NvbnNvbGUubG9nIChwYWdlKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaCgnaHR0cHM6Ly9zdmVsdGUtY291cnNlLTIwYzVlLWRlZmF1bHQtcnRkYi5maXJlYmFzZWlvLmNvbS9tZWV0dXBzLmpzb24nKVxyXG5cdFx0LnRoZW4ocmVzID0+IHtcdFx0XHJcblx0XHRcdGlmICghcmVzLm9rKXtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJGZXRjaCBNZWV0dXAgRGF0YSBmYWlsZWQhXCIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIHBhcnNlIHRoZSBqc29uIHRvIGphdmFzY3JpcHQgb2JqZWN0IGFuZCBhbHNvIHJldHVybnMgdGhlIHByb21pc2VcdHRvIHRoZSBuZXh0IHRoZW4gY2xhc2VcclxuXHRcdFx0cmV0dXJuIHJlcy5qc29uKCk7XHRcclxuXHRcdH0pLnRoZW4oZGF0YSA9PntcdFx0XHRcclxuXHRcdFx0Y29uc3QgZmV0Y2hlZE1lZXR1cHMgPSBbXTtcclxuXHRcdFx0Zm9yIChsZXQga2V5IGluIGRhdGEpe1x0XHRcdFx0XHRcdFx0XHRcclxuICAgICAgICAgICAgICAgIGZldGNoZWRNZWV0dXBzLnB1c2goeyBpZDoga2V5LC4uLmRhdGFba2V5XX0pO1xyXG5cdFx0XHR9ICAgICAgICAgXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBPYmplY3Qgd2lsbCByZXR1cm4gdG8gdGhpcyBjb21wb25lbnRzIGludG8gZmV0Y2hlZE1lZXR1cHMgdmFyaWFibGUgdXNpbmcgJ2V4cG9ydCBsZXQgZmV0Y2hlZE1lZXR1cHMnIC0gbGluZSA0MSAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIHsgZmV0Y2hlZE1lZXR1cHM6IGZldGNoZWRNZWV0dXBzLnJldmVyc2UoKSB9O1xyXG4gICAgICAgICAgICBcclxuXHRcdH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgIGh0dHBFcnJvciA9IGVycjtcclxuICAgICAgICAgICAgaXNMb2FkaW5nID0gZmFsc2U7XHRcdFxyXG5cdFx0XHRjb25zb2xlLmxvZyAoIGVyciApO1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yKDUwMCwgJ0N1c3RvbSBFcnJvciBNZXNhZ2UgLSBjb3VsZCBub3QgZmV0Y2ggbWVldHVwcyBkYXRhJylcclxuXHRcdH0pO1xyXG4gICAgfSAgIFxyXG5cclxuPC9zY3JpcHQ+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgaW1wb3J0IEVkaXRNZWV0dXAgZnJvbSBcIi4uL2NvbXBvbmVudHMvTWVldHVwcy9FZGl0TWVldHVwLnN2ZWx0ZVwiO1xyXG4gICAgaW1wb3J0IE1lZXR1cEl0ZW0gZnJvbSBcIi4uL2NvbXBvbmVudHMvTWVldHVwcy9NZWV0dXBJdGVtLnN2ZWx0ZVwiO1xyXG4gICAgaW1wb3J0IEZpbHRlcmVkTWVldHVwIGZyb20gXCIuLi9jb21wb25lbnRzL01lZXR1cHMvRmlsdGVyZWRNZWV0dXAuc3ZlbHRlXCI7XHJcbiAgICBpbXBvcnQgQnV0dG9uIGZyb20gXCIuLi9jb21wb25lbnRzL1VJL0J1dHRvbi5zdmVsdGVcIjtcclxuICAgIGltcG9ydCBMb2FkaW5nU3Bpbm5lciBmcm9tIFwiLi4vY29tcG9uZW50cy9VSS9Mb2FkaW5nU3Bpbm5lci5zdmVsdGVcIjtcclxuICAgIGltcG9ydCBtZWV0dXBzIGZyb20gXCIuLi8uLi9zcmMvbWVldHVwcy1zdG9yZS5qc1wiOyAgIC8vIHN0b3JlXHJcbiAgICBpbXBvcnQgeyBvbk1vdW50LCBvbkRlc3Ryb3kgfSBmcm9tIFwic3ZlbHRlXCI7XHJcbiAgICBpbXBvcnQgeyBzY2FsZSB9IGZyb20gXCJzdmVsdGUvdHJhbnNpdGlvblwiO1xyXG4gICAgaW1wb3J0IHsgZmxpcCB9IGZyb20gXCJzdmVsdGUvYW5pbWF0ZVwiO1xyXG4gICAgXHJcbiAgICBleHBvcnQgbGV0IGZldGNoZWRNZWV0dXBzOyAgIFxyXG4gICAgXHJcbiAgICBsZXQgZmF2T25seSA9IGZhbHNlOyAgICBcclxuICAgIGZ1bmN0aW9uIGZpbHRlck1lZXR1cHMoZXZlbnQpe1xyXG4gICAgICAgIGZhdk9ubHkgPSBldmVudC5kZXRhaWwgPT09IDE7XHJcbiAgICB9XHJcblxyXG4gICAgJDogZmlsdGVyZWRNZWV0dXBzTGlzdCA9ICggZmF2T25seSApID8gIGxvYWRlZE1lZXR1cHMuZmlsdGVyKCBpdGVtID0+IGl0ZW0uaXNGYXZvcml0ZSApIDogbG9hZGVkTWVldHVwcztcclxuXHJcbiAgICBsZXQgZWRpdE1vZGUgPSBudWxsOyBcclxuICAgIGxldCBlZGl0SUQgPSBudWxsOyAgXHJcbiAgICBsZXQgaXNMb2FkaW5nID0gZmFsc2U7XHJcbiAgICBsZXQgbG9hZGVkTWVldHVwcyA9IFtdO1xyXG4gICAgbGV0IHVuc3Vic2NyaWJlO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmVkTWVldHVwKCl7ICAgICAgICAgXHJcbiAgICAgICAgZWRpdE1vZGUgPSBudWxsOyAgICAgICAgXHJcbiAgICAgICAgZWRpdElEID0gbnVsbDtcclxuICAgIH0gICAgXHJcblxyXG4gICAgZnVuY3Rpb24gY2FuY2VsRWRpdCgpe1xyXG4gICAgICAgIGVkaXRNb2RlID0gbnVsbDtcclxuICAgICAgICBlZGl0SUQgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHN0YXJ0QWRkKCl7XHJcbiAgICAgICAgZWRpdE1vZGUgPSAnZWRpdCc7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZWRpdE1lZXR1cChldmVudCl7XHJcbiAgICAgICAgZWRpdE1vZGUgPSBcImVkaXRcIjtcclxuICAgICAgICBlZGl0SUQgPSBldmVudC5kZXRhaWw7XHJcbiAgICB9XHJcblxyXG4gICAgb25Nb3VudCggKCkgPT4ge1xyXG4gICAgICAgIHVuc3Vic2NyaWJlID0gbWVldHVwcy5zdWJzY3JpYmUoIGl0ZW1zID0+IHsgbG9hZGVkTWVldHVwcyA9IGl0ZW1zIH0pO1xyXG4gICAgICAgIG1lZXR1cHMuc2V0TWVldHVwcyhmZXRjaGVkTWVldHVwcyk7XHJcbiAgICB9KTsgICAgICAgIFxyXG5cclxuICAgIG9uRGVzdHJveSggKCkgPT4ge1xyXG4gICAgICAgIGlmICh1bnN1YnNjcmliZSkgdW5zdWJzY3JpYmUoKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG4gICAgI21lZXR1cHMge1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XHJcbiAgICAgICAgZ3JpZC1nYXA6IDFyZW07XHJcbiAgICB9XHJcblxyXG4gICAgI21lZXR1cC1jb250cm9sc3tcclxuICAgICAgICBtYXJnaW46IDFyZW07XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcblxyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkge1xyXG4gICAgICAgICNtZWV0dXBzIHtcclxuICAgICAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMiwgMWZyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLm5vLW1lc3NhZ2V7XHJcbiAgICAgICAgbWFyZ2luOiAxcmVtO1xyXG4gICAgfVxyXG5cclxuPC9zdHlsZT5cclxuXHJcbjxzdmVsdGU6aGVhZD5cclxuXHQ8dGl0bGU+QWxsIE1lZXR1cHM8L3RpdGxlPlxyXG48L3N2ZWx0ZTpoZWFkPlxyXG5cclxueyNpZiBlZGl0TW9kZSA9PT0gJ2VkaXQnfVxyXG4gICAgPEVkaXRNZWV0dXAgaWQ9XCJ7ZWRpdElEfVwiIG9uOnNhdmVNZWV0dXA9XCJ7c2F2ZWRNZWV0dXB9XCIgb246Y2FuY2VsTW9kYWw9XCJ7Y2FuY2VsRWRpdH1cIiAvPiAgICBcclxuey9pZn0gICAgICBcclxuXHJcbnsjaWYgaXNMb2FkaW5nfVxyXG4gICAgPExvYWRpbmdTcGlubmVyIG1lc3NhZ2U9XCJGZXRjaGluZyBNZWV0dXBzIERhdGFcIi8+XHJcbns6ZWxzZX1cclxuICAgIDxzZWN0aW9uIGlkPVwibWVldHVwLWNvbnRyb2xzXCI+XHJcbiAgICAgICAgPEZpbHRlcmVkTWVldHVwIG9uOmZpbHRlcmJ5PVwie2ZpbHRlck1lZXR1cHN9XCIvPlxyXG4gICAgICAgIDxCdXR0b24gb246Y2xpY2s9XCJ7c3RhcnRBZGR9XCIgPk5ldyBNZWV0dXA8L0J1dHRvbj5cclxuICAgIDwvc2VjdGlvbj5cclxuICAgIDxzZWN0aW9uIGlkPVwibWVldHVwc1wiPiAgXHJcbiAgICAgICAgeyNpZiBmaWx0ZXJlZE1lZXR1cHNMaXN0Lmxlbmd0aD09PTB9XHJcbiAgICAgICAgICAgIDxwIGNsYXNzPVwibm8tbWVzc2FnZVwiPlRoZSBTZXJ2ZXIgaGFzIG5vIG1lZXR1cHMuIFBsZWFzZSBzdGFydCBieSBhZGRpbmcgb25lLjwvcD5cclxuICAgICAgICB7L2lmfVxyXG4gICAgICAgIDwhLS0gXHJcbiAgICAgICAgICAgIG9uOnRvZ2dsZUZhdm9yaXRlIGJlbG93IGxpc3RlbmQgZm9yIGN1c3RvbSBldmVudCAndG9nZ2xlRmF2b3JpdGUnXHJcbiAgICAgICAgLS0+ICBcclxuICAgICAgICB7I2VhY2ggZmlsdGVyZWRNZWV0dXBzTGlzdCBhcyBtZWV0dXAgKG1lZXR1cC5pZCkgfSAgICAgICAgXHJcbiAgICAgICAgICAgIDxkaXYgdHJhbnNpdGlvbjpzY2FsZT1cInt7ZHVyYXRpb246IDMwMH19XCIgYW5pbWF0ZTpmbGlwPlxyXG4gICAgICAgICAgICAgICAgPE1lZXR1cEl0ZW0gXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9e21lZXR1cC5pZH1cclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17bWVldHVwLnRpdGxlfVxyXG4gICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlPXttZWV0dXAuc3VidGl0bGV9XHJcbiAgICAgICAgICAgICAgICAgICAgaW1nVVJMPXttZWV0dXAuaW1nVVJMfVxyXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPXttZWV0dXAuZGVzY3JpcHRpb259XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzcz17bWVldHVwLmFkZHJlc3N9XHJcbiAgICAgICAgICAgICAgICAgICAgZW1haWw9e21lZXR1cC5jb250YWN0RW1haWx9XHJcbiAgICAgICAgICAgICAgICAgICAgaXNGYXY9e21lZXR1cC5pc0Zhdm9yaXRlfSAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgb246ZWRpdD17ZWRpdE1lZXR1cH1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIHsvZWFjaH1cclxuICAgIDwvc2VjdGlvbj4gICAgXHJcbnsvaWZ9XHJcblxyXG5cclxuXHJcbiIsIjxzY3JpcHQgY29udGV4dD1cIm1vZHVsZVwiPlxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHByZWxvYWQocGFnZSl7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyAocGFnZSk7XHJcbiAgICAgICAgY29uc3QgbWVldHVwSUQgPSBwYWdlLnBhcmFtcy5pZDsgICAgLy9wYWdlIFVSTCBwYXJhbXNcclxuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaCgnaHR0cHM6Ly9zdmVsdGUtY291cnNlLTIwYzVlLWRlZmF1bHQtcnRkYi5maXJlYmFzZWlvLmNvbS9tZWV0dXBzLycgKyBtZWV0dXBJRCArJy5qc29uJylcclxuICAgICAgICAgICAgLnRoZW4oIHJlcyA9PntcclxuICAgICAgICAgICAgICAgIGlmICggIXJlcy5vayApe1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkhUVFAgVXBkYXRlIEZhdm9yaXRlIE1lZXR1cCBFcnJvclwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSkudGhlbiggbWVldHVwRGF0YSA9PntcclxuICAgICAgICAgICAgICAgIC8vIE9iamVjdCB3aWxsIHJldHVybiB0byB0aGlzIGNvbXBvbmVudHMgaW50byBzZWxlY3RlZE1ldHVwIHZhcmlhYmxlIHVzaW5nICdleHBvcnQgbGV0IHNlbGVjdGVkTWVldHVwJyAtIGxpbmUgMjRcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IHNlbGVjdGVkTWVldHVwOiB7Li4ubWVldHVwRGF0YSwgaWQ6IG1lZXR1cElEfX0gXHJcblxyXG4gICAgICAgICAgICB9KS5jYXRjaCggZXJyID0+e1xyXG4gICAgICAgICAgICAgICAgaXNGYXZvcml0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nIChlcnIpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yKDQwMCwgJ0NvdWxkIG5vdCBmZXRjaCB0aGUgbWVldHVwIHdpdGggaWQnICsgbWVldHVwSUQpO1xyXG4gICAgICAgICAgICB9KTsgICAgICBcclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9VSS9CdXR0b24uc3ZlbHRlXCI7ICBcclxuICAgIFxyXG4gICAgZXhwb3J0IGxldCBzZWxlY3RlZE1lZXR1cDsgICAgICAgIFxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuICAgIHNlY3Rpb24ge1xyXG4gICAgbWFyZ2luLXRvcDogNHJlbTtcclxuICAgIH1cclxuXHJcbiAgICAuaW1hZ2Uge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDI1cmVtO1xyXG4gICAgfVxyXG5cclxuICAgIGltZyB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogMTAwJTtcclxuICAgIG9iamVjdC1maXQ6IGNvdmVyO1xyXG4gICAgfVxyXG5cclxuICAgIC5pbWFnZSB7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZTdlN2U3O1xyXG4gICAgfVxyXG5cclxuICAgIC5jb250ZW50IHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHdpZHRoOiA4MCU7XHJcbiAgICBtYXJnaW46IGF1dG87XHJcbiAgICB9XHJcblxyXG4gICAgaDEge1xyXG4gICAgZm9udC1zaXplOiAycmVtO1xyXG4gICAgZm9udC1mYW1pbHk6ICdSb2JvdG8gU2xhYicsIHNhbnMtc2VyaWY7XHJcbiAgICBtYXJnaW46IDAuNXJlbSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGgyIHtcclxuICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcclxuICAgIGNvbG9yOiAjNmI2YjZiO1xyXG4gICAgfVxyXG5cclxuICAgIHAge1xyXG4gICAgZm9udC1zaXplOiAxLjVyZW07XHJcbiAgICB9XHJcbjwvc3R5bGU+XHJcblxyXG48c2VjdGlvbj5cclxuICAgIDxkaXYgY2xhc3M9XCJpbWFnZVwiPlxyXG4gICAgICAgIDxpbWcgc3JjPVwie3NlbGVjdGVkTWVldHVwLmltZ1VSTH1cIiBhbHQ9XCJcIiAvPlxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY29udGVudFwiPlxyXG4gICAgICAgIDxoMT57c2VsZWN0ZWRNZWV0dXAudGl0bGV9PC9oMT5cclxuICAgICAgICA8aDI+e3NlbGVjdGVkTWVldHVwLnN1YnRpdGxlfTwvaDI+XHJcbiAgICAgICAgPHA+e3NlbGVjdGVkTWVldHVwLmRlc2NyaXB0aW9ufTwvcD5cclxuICAgICAgICA8QnV0dG9uIGhyZWY9XCJtYWlsdG86e3NlbGVjdGVkTWVldHVwLmNvbnRhY3RFbWFpbH1cIj5Db250YWN0PC9CdXR0b24+XHJcbiAgICAgICAgPEJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgbW9kZT1cIm91dGxpbmVcIiBocmVmPVwiL1wiPkJhY2s8L0J1dHRvbj5cclxuICAgIDwvZGl2PlxyXG48L3NlY3Rpb24+IiwiPHN0eWxlPlxyXG4gICAgaGVhZGVye1xyXG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICB0b3A6MDtcclxuICAgICAgICBsZWZ0OiAwO1xyXG4gICAgICAgIGhlaWdodDogNHJlbTtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2YwMDU2O1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBib3gtc2hhZG93OiAwIDJweCA2cHggcmdiYSgwLDAsMCwwLjI2KTtcclxuICAgIH1cclxuXHJcbiAgICBoMXtcclxuICAgICAgICBmb250LWZhbWlseTogJ1JvYm90byBzbGFiJyxzZXJpZjtcclxuICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICBtYXJnaW46IDA7XHJcbiAgICB9XHJcbjwvc3R5bGU+XHJcblxyXG48aGVhZGVyPlxyXG4gICAgPGgxPk1lZXRVczwvaDE+XHJcbjwvaGVhZGVyPiIsIjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgbGV0IG1lc3NhZ2U9XCJcIjtcclxuPC9zY3JpcHQ+XHJcbjxzdHlsZT5cclxuICAgIC5sb2FkaW5nQ29udGFpbmVye1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICBtYXJnaW46IDJyZW07XHJcbiAgICAgICAgaGVpZ2h0OiA1MHZoO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAubG9hZGluZ0NvbnRhaW5lciBweyAgICAgICAgXHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIHRvcDogNTAlO1xyXG4gICAgICAgIGxlZnQ6IDUwJTtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcclxuICAgICAgICBjb2xvcjogI2NmMDA1NlxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBDU1MgZnJvbSBodHRwczovL2xvYWRpbmcuaW8vY3NzLyAqL1xyXG4gICAgLmxkcy1kZWZhdWx0IHtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgIHdpZHRoOiA4MHB4O1xyXG4gICAgICAgIGhlaWdodDogODBweDtcclxuICAgIH1cclxuICAgIC5sZHMtZGVmYXVsdCBkaXYge1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICB3aWR0aDogNnB4O1xyXG4gICAgICAgIGhlaWdodDogNnB4O1xyXG4gICAgICAgIGJhY2tncm91bmQ6ICNjZjAwNTY7XHJcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgICAgIGFuaW1hdGlvbjogbGRzLWRlZmF1bHQgMS4ycyBsaW5lYXIgaW5maW5pdGU7XHJcbiAgICB9XHJcbiAgICAubGRzLWRlZmF1bHQgZGl2Om50aC1jaGlsZCgxKSB7XHJcbiAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiAwcztcclxuICAgICAgICB0b3A6IDM3cHg7XHJcbiAgICAgICAgbGVmdDogNjZweDtcclxuICAgIH1cclxuICAgIC5sZHMtZGVmYXVsdCBkaXY6bnRoLWNoaWxkKDIpIHtcclxuICAgICAgICBhbmltYXRpb24tZGVsYXk6IC0wLjFzO1xyXG4gICAgICAgIHRvcDogMjJweDtcclxuICAgICAgICBsZWZ0OiA2MnB4O1xyXG4gICAgfVxyXG4gICAgLmxkcy1kZWZhdWx0IGRpdjpudGgtY2hpbGQoMykge1xyXG4gICAgICAgIGFuaW1hdGlvbi1kZWxheTogLTAuMnM7XHJcbiAgICAgICAgdG9wOiAxMXB4O1xyXG4gICAgICAgIGxlZnQ6IDUycHg7XHJcbiAgICB9XHJcbiAgICAubGRzLWRlZmF1bHQgZGl2Om50aC1jaGlsZCg0KSB7XHJcbiAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiAtMC4zcztcclxuICAgICAgICB0b3A6IDdweDtcclxuICAgICAgICBsZWZ0OiAzN3B4O1xyXG4gICAgfVxyXG4gICAgLmxkcy1kZWZhdWx0IGRpdjpudGgtY2hpbGQoNSkge1xyXG4gICAgICAgIGFuaW1hdGlvbi1kZWxheTogLTAuNHM7XHJcbiAgICAgICAgdG9wOiAxMXB4O1xyXG4gICAgICAgIGxlZnQ6IDIycHg7XHJcbiAgICB9XHJcbiAgICAubGRzLWRlZmF1bHQgZGl2Om50aC1jaGlsZCg2KSB7XHJcbiAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiAtMC41cztcclxuICAgICAgICB0b3A6IDIycHg7XHJcbiAgICAgICAgbGVmdDogMTFweDtcclxuICAgIH1cclxuICAgIC5sZHMtZGVmYXVsdCBkaXY6bnRoLWNoaWxkKDcpIHtcclxuICAgICAgICBhbmltYXRpb24tZGVsYXk6IC0wLjZzO1xyXG4gICAgICAgIHRvcDogMzdweDtcclxuICAgICAgICBsZWZ0OiA3cHg7XHJcbiAgICB9XHJcbiAgICAubGRzLWRlZmF1bHQgZGl2Om50aC1jaGlsZCg4KSB7XHJcbiAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiAtMC43cztcclxuICAgICAgICB0b3A6IDUycHg7XHJcbiAgICAgICAgbGVmdDogMTFweDtcclxuICAgIH1cclxuICAgIC5sZHMtZGVmYXVsdCBkaXY6bnRoLWNoaWxkKDkpIHtcclxuICAgICAgICBhbmltYXRpb24tZGVsYXk6IC0wLjhzO1xyXG4gICAgICAgIHRvcDogNjJweDtcclxuICAgICAgICBsZWZ0OiAyMnB4O1xyXG4gICAgfVxyXG4gICAgLmxkcy1kZWZhdWx0IGRpdjpudGgtY2hpbGQoMTApIHtcclxuICAgICAgICBhbmltYXRpb24tZGVsYXk6IC0wLjlzO1xyXG4gICAgICAgIHRvcDogNjZweDtcclxuICAgICAgICBsZWZ0OiAzN3B4O1xyXG4gICAgfVxyXG4gICAgLmxkcy1kZWZhdWx0IGRpdjpudGgtY2hpbGQoMTEpIHtcclxuICAgICAgICBhbmltYXRpb24tZGVsYXk6IC0xcztcclxuICAgICAgICB0b3A6IDYycHg7XHJcbiAgICAgICAgbGVmdDogNTJweDtcclxuICAgIH1cclxuICAgIC5sZHMtZGVmYXVsdCBkaXY6bnRoLWNoaWxkKDEyKSB7XHJcbiAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiAtMS4xcztcclxuICAgICAgICB0b3A6IDUycHg7XHJcbiAgICAgICAgbGVmdDogNjJweDtcclxuICAgIH1cclxuICAgIEBrZXlmcmFtZXMgbGRzLWRlZmF1bHQge1xyXG4gICAgIDAlLCAyMCUsIDgwJSwgMTAwJSB7XHJcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgIH1cclxuICAgIDUwJSB7XHJcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjUpO1xyXG4gICAgfVxyXG4gICAgfVxyXG5cclxuPC9zdHlsZT5cclxuXHJcbjxkaXYgY2xhc3M9XCJsb2FkaW5nQ29udGFpbmVyXCI+XHJcbiAgICA8IS0tIEhUTUwgRlJPTSBodHRwczovL2xvYWRpbmcuaW8vY3NzLyAtLT5cclxuICAgIDxkaXYgY2xhc3M9XCJsZHMtZGVmYXVsdFwiPlxyXG4gICAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICA8ZGl2PjwvZGl2PlxyXG4gICAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICA8ZGl2PjwvZGl2PlxyXG4gICAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICA8ZGl2PjwvZGl2PlxyXG4gICAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICA8ZGl2PjwvZGl2PlxyXG4gICAgPC9kaXY+ICAgIFxyXG4gICAgPHA+e21lc3NhZ2V9PC9wPlxyXG48L2Rpdj5cclxuIiwiPHNjcmlwdD5cclxuICAgIGV4cG9ydCBsZXQgdHlwZSA9IFwiYnV0dG9uXCI7ICAgIFxyXG4gICAgZXhwb3J0IGxldCBocmVmID0gbnVsbDtcclxuICAgIGV4cG9ydCBsZXQgbW9kZSA9IG51bGw7XHJcbiAgICBleHBvcnQgbGV0IGNvbG9yID0gbnVsbDtcclxuICAgIGV4cG9ydCBsZXQgZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIGV4cG9ydCBsZXQgbG9hZGluZ0ljb24gPSBmYWxzZTtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbmJ1dHRvbixhIHtcclxuICBmb250OiBpbmhlcml0O1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjZjAwNTY7XHJcbiAgYmFja2dyb3VuZDogI2NmMDA1NjtcclxuICBwYWRkaW5nOiAwLjVyZW0gMXJlbTtcclxuICBjb2xvcjogd2hpdGU7XHJcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gIGJveC1zaGFkb3c6IDFweCAxcHggM3B4IHJnYmEoMCwgMCwgMCwgMC4yNik7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICB3aWR0aDogMTIwcHg7XHJcbn1cclxuXHJcbmJ1dHRvbjpmb2N1cyB7XHJcbiAgb3V0bGluZTogbm9uZTtcclxufVxyXG5cclxuYnV0dG9uOmhvdmVyLFxyXG5idXR0b246YWN0aXZlLFxyXG5hOmhvdmVyLFxyXG5hOmFjdGl2ZSB7XHJcbiAgYmFja2dyb3VuZDogI2U0MDc2MztcclxuICBib3JkZXItY29sb3I6ICNlNDA3NjM7XHJcbiAgYm94LXNoYWRvdzogMXB4IDFweCA4cHggcmdiYSg3NywgNTEsIDUxLCAwLjI2KTtcclxufVxyXG5cclxuYnV0dG9uOmRpc2FibGVkLFxyXG5idXR0b246ZGlzYWJsZWQ6aG92ZXIsXHJcbmJ1dHRvbjpkaXNhYmxlZDphY3RpdmUge1xyXG4gIGJhY2tncm91bmQ6ICNjY2M7XHJcbiAgYm9yZGVyLWNvbG9yOiAjY2NjO1xyXG4gIGNvbG9yOiAjOTU5NTk1O1xyXG4gIGJveC1zaGFkb3c6IG5vbmU7XHJcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcclxufVxyXG5cclxuLnN1Y2Nlc3Mge1xyXG4gIGJhY2tncm91bmQ6ICMwMWExMjk7XHJcbiAgYm9yZGVyLWNvbG9yOiAjMDFhMTI5O1xyXG59XHJcblxyXG4uc3VjY2Vzczpob3ZlcixcclxuLnN1Y2Nlc3M6YWN0aXZlIHtcclxuICBiYWNrZ3JvdW5kOiAjMWFjNzQ1O1xyXG4gIGJvcmRlci1jb2xvcjogIzFhYzc0NTtcclxufVxyXG5cclxuLm91dGxpbmUge1xyXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG4gIGNvbG9yOiAjY2YwMDU2O1xyXG4gIGJveC1zaGFkb3c6IG5vbmU7XHJcbn1cclxuXHJcbi5vdXRsaW5lOmhvdmVyLFxyXG4ub3V0bGluZTphY3RpdmUge1xyXG4gIGJhY2tncm91bmQ6ICNmZmM3ZGU7XHJcbiAgYm94LXNoYWRvdzogbm9uZTtcclxufVxyXG5cclxuLm91dGxpbmU6ZGlzYWJsZWQsXHJcbi5vdXRsaW5lOmRpc2FibGVkOmhvdmVyLFxyXG4ub3V0bGluZTpkaXNhYmxlZDphY3RpdmUge1xyXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG4gIGNvbG9yOiAjY2NjO1xyXG59XHJcblxyXG4ub3V0bGluZS5zdWNjZXNzIHtcclxuICBib3JkZXItY29sb3I6ICMwMWExMjk7XHJcbiAgY29sb3I6ICMwMWExMjk7XHJcbn1cclxuXHJcbi5vdXRsaW5lLnN1Y2Nlc3M6aG92ZXIsXHJcbi5vdXRsaW5lLnN1Y2Nlc3M6YWN0aXZlIHtcclxuICBiYWNrZ3JvdW5kOiAjYzJmZmQxO1xyXG59XHJcblxyXG48L3N0eWxlPlxyXG5cclxueyNpZiBocmVmfVxyXG4gIDxhIGhyZWY9XCJ7aHJlZn1cIj48c2xvdCAvPjwvYT5cclxuezplbHNlfVxyXG4gIDwhLS1cclxuICAgICAgb246Y2xpY2sgLSBmb3J3YXJkcyB0aGUgYnV0dG9uJ3MgY2xpY2sgZXZlbnQgdG8gdGhlIGNvbXBvbmVudCB3aGVyZSBpdCBpcyBiZWluZyB1c2VkLlxyXG4gICAgICBJbiB0aGlzIGNhc2UsIGl0cyBNZWV0dXBJdGVtLlN2ZWx0ZS5cclxuICAtLT5cclxuICA8YnV0dG9uIGNsYXNzPVwie21vZGV9IHtjb2xvcn1cIiB7dHlwZX0gb246Y2xpY2sge2Rpc2FibGVkfT5cclxuICAgIHsjaWYgbG9hZGluZ0ljb259XHJcbiAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcmVmcmVzaCBmYS1zcGluXCI+PC9pPlxyXG4gICAgezplbHNlfVxyXG4gICAgICA8c2xvdCAvPlxyXG4gICAgey9pZn1cclxuICA8L2J1dHRvbj5cclxuey9pZn1cclxuIiwiPHNjcmlwdD5cclxuICAgIGltcG9ydCBCdXR0b24gZnJvbSBcIi4uL1VJL0J1dHRvbi5zdmVsdGVcIjtcclxuICAgIGltcG9ydCBCYWRnZSBmcm9tIFwiLi4vVUkvQmFkZ2Uuc3ZlbHRlXCI7ICAgIFxyXG4gICAgaW1wb3J0IG1lZXR1cHMgZnJvbSBcIi4uLy4uL21lZXR1cHMtc3RvcmVcIjsgICAvLyBzdG9yZVxyXG4gICAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gIGZyb20gXCJzdmVsdGVcIjsgICAgXHJcblxyXG4gICAgZXhwb3J0IGxldCBpZDtcclxuICAgIGV4cG9ydCBsZXQgdGl0bGU7XHJcbiAgICBleHBvcnQgbGV0IHN1YnRpdGxlO1xyXG4gICAgZXhwb3J0IGxldCBpbWdVUkw7XHJcbiAgICBleHBvcnQgbGV0IGRlc2NyaXB0aW9uO1xyXG4gICAgZXhwb3J0IGxldCBhZGRyZXNzOyAgICBcclxuICAgIGV4cG9ydCBsZXQgaXNGYXY7XHJcblxyXG4gICAgbGV0IGlzRmF2b3JpdGVJblByb2dyZXNzID0gZmFsc2U7XHJcblxyXG4gICAgZnVuY3Rpb24gdG9nZ2xlRmF2b3JpdGUoKXtcclxuICAgICAgaXNGYXZvcml0ZUluUHJvZ3Jlc3MgPSB0cnVlO1xyXG4gICAgICBmZXRjaCgnaHR0cHM6Ly9zdmVsdGUtY291cnNlLTIwYzVlLWRlZmF1bHQtcnRkYi5maXJlYmFzZWlvLmNvbS9tZWV0dXBzLycgKyBpZCArJy5qc29uJywge1xyXG4gICAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLCAgICAvLyBzeW50YXggZm9yIGZpcmViYXNlIHRvIHVwZGF0ZSBleGlzdGluZyByZWNvcmQuXHJcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7aXNGYXZvcml0ZTogIWlzRmF2fSksXHJcbiAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOlwiYXBwbGljYXRpb24vanNvblwiIH1cclxuICAgICAgfSkudGhlbiggcmVzID0+e1xyXG4gICAgICAgICAgaWYgKCAhcmVzLm9rICl7XHJcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSFRUUCBVcGRhdGUgRmF2b3JpdGUgTWVldHVwIEVycm9yXCIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaXNGYXZvcml0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcclxuICAgICAgICAgIG1lZXR1cHMudXBkYXRlRmF2b3JpdGUoaWQpOyAgICAvLyBMb2NhbCBzdG9yZSB1cGRhdGVcclxuICAgICAgfSkuY2F0Y2goIGVyciA9PntcclxuICAgICAgICBpc0Zhdm9yaXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgY29uc29sZS5sb2cgKGVycilcclxuICAgICAgfSk7ICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcclxuICAgIGZ1bmN0aW9uIHNob3dEZXRhaWwoKXtcclxuICAgICAgZGlzcGF0Y2goXCJzaG93RGV0YWlsXCIsaWQpO1xyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuICAgIGFydGljbGUge1xyXG4gICAgICBib3gtc2hhZG93OiAwIDJweCA4cHggcmdiYSgwLCAwLCAwLCAwLjI2KTtcclxuICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICAgICAgbWFyZ2luOiAxcmVtO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgaGVhZGVyLFxyXG4gICAgLmNvbnRlbnQsXHJcbiAgICBmb290ZXIge1xyXG4gICAgICBwYWRkaW5nOiAxcmVtO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgLmltYWdlIHtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIGhlaWdodDogMTRyZW07XHJcbiAgICB9XHJcbiAgXHJcbiAgICAuaW1hZ2UgaW1nIHtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgb2JqZWN0LWZpdDogY292ZXI7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBoMSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcclxuICAgICAgbWFyZ2luOiAwLjVyZW0gMDtcclxuICAgICAgZm9udC1mYW1pbHk6IFwiUm9ib3RvIFNsYWJcIiwgc2Fucy1zZXJpZjtcclxuICAgIH1cclxuICBcclxuICAgIFxyXG4gIFxyXG4gICAgaDIge1xyXG4gICAgICBmb250LXNpemU6IDFyZW07XHJcbiAgICAgIGNvbG9yOiAjODA4MDgwO1xyXG4gICAgICBtYXJnaW46IDAuNXJlbSAwO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgcCB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcclxuICAgICAgbWFyZ2luOiAwO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgZGl2IHtcclxuICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLmNvbnRlbnR7XHJcbiAgICAgIGhlaWdodDogNHJlbTs7XHJcbiAgICB9XHJcbiAgPC9zdHlsZT5cclxuXHJcbjxhcnRpY2xlIGlkPVwie2lkfVwiPlxyXG4gICAgPGhlYWRlcj5cclxuICAgICAgICA8aDE+XHJcbiAgICAgICAgICB7dGl0bGV9XHJcbiAgICAgICAgICB7I2lmIGlzRmF2fVxyXG4gICAgICAgICAgICA8QmFkZ2U+RkFWT1JJVEU8L0JhZGdlPlxyXG4gICAgICAgICAgey9pZn1cclxuICAgICAgICA8L2gxPlxyXG4gICAgICAgIDxoMj57c3VidGl0bGV9PC9oMj5cclxuICAgICAgICA8cD57YWRkcmVzc308L3A+XHJcbiAgICA8L2hlYWRlcj5cclxuICAgIDxkaXYgY2xhc3M9XCJpbWFnZVwiPlxyXG4gICAgICAgIDxpbWcgc3JjPVwie2ltZ1VSTH1cIiBhbHQ9XCJ7dGl0bGV9XCIgLz5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzcz1cImNvbnRlbnRcIj5cclxuICAgICAgICA8cD57ZGVzY3JpcHRpb259PC9wPiAgICAgICAgXHJcbiAgICA8L2Rpdj5cclxuICAgIDxmb290ZXI+XHJcbiAgICAgICAgPEJ1dHRvbiBtb2RlPVwib3V0bGluZVwiIHR5cGU9XCJidXR0b25cIiBvbjpjbGljaz1cInsgKCkgPT4gZGlzcGF0Y2goJ2VkaXQnLGlkKSB9XCI+RWRpdDwvQnV0dG9uPiAgICAgICAgXHJcbiAgICAgICAgPCEtLSBcclxuICAgICAgICAgICAgb246Y2xpY2sgZXZlbnQgaGFuZGxlciB0cmlnZ2Vycy9kaXNwYXRjaCB0aGUgY3VzdG9tIGV2ZW50ICd0b2dnZXJsRmF2b3JpdGUnIGFsb25nIHdpdGggJ2lkJyB2YWx1ZVxyXG4gICAgICAgIC0tPlxyXG4gICAgICAgIDxCdXR0b24gXHJcbiAgICAgICAgICBtb2RlPVwib3V0bGluZVwiIFxyXG4gICAgICAgICAgY29sb3I9XCJ7aXNGYXYgPyBudWxsIDogJ3N1Y2Nlc3MnfVwiIFxyXG4gICAgICAgICAgdHlwZT1cImJ1dHRvblwiIFxyXG4gICAgICAgICAgbG9hZGluZ0ljb249XCJ7aXNGYXZvcml0ZUluUHJvZ3Jlc3N9XCJcclxuICAgICAgICAgIG9uOmNsaWNrPVwie3RvZ2dsZUZhdm9yaXRlfVwiID5cclxuICAgICAgICAgIHtpc0ZhdiA/ICdVbmZhdm9yaXRlJyA6ICdGYXZvcml0ZSd9XHJcbiAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgPEJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaHJlZj1cIi97aWR9XCI+U2hvdyBEZXRhaWw8L0J1dHRvbj5cclxuICAgIDwvZm9vdGVyPlxyXG48L2FydGljbGU+IiwiPHNjcmlwdD5cclxuICAgIGltcG9ydCBUZXh0SW5wdXQgZnJvbSBcIi4uL1VJL1RleHRJbnB1dC5zdmVsdGVcIjtcclxuICAgIGltcG9ydCBCdXR0b24gZnJvbSBcIi4uL1VJL0J1dHRvbi5zdmVsdGVcIjsgXHJcbiAgICBpbXBvcnQgTW9kYWwgZnJvbSBcIi4uL1VJL01vZGFsLnN2ZWx0ZVwiO1xyXG4gICAgaW1wb3J0IHsgaXNFbXB0eSwgdmFsaWRhdGVFbWFpbE9yVVJMIH0gZnJvbSBcIi4uLy4uL2hlbHBlcnMvdmFsaWRhdGlvbi5qc1wiO1xyXG4gICAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcInN2ZWx0ZVwiO1xyXG4gICAgaW1wb3J0IG1lZXR1cHMgZnJvbSBcIi4uLy4uLy4uL3NyYy9tZWV0dXBzLXN0b3JlXCI7ICAgLy8gc3RvcmVcclxuXHJcbiAgICBleHBvcnQgbGV0IGlkID0gbnVsbDtcclxuICAgIFxyXG4gICAgbGV0IHRpdGxlPVwiXCI7XHJcbiAgICBsZXQgc3VidGl0bGU9XCJcIjtcclxuICAgIGxldCBkZXNjcmlwdGlvbj1cIlwiO1xyXG4gICAgbGV0IGltZ1VSTD1cIlwiO1xyXG4gICAgbGV0IGFkZHJlc3M9XCJcIjtcclxuICAgIGxldCBlbWFpbD1cIlwiO1xyXG4gICAgbGV0IHVwZGF0ZU1lZXR1cCA9IHt9OyAgICBcclxuXHJcbiAgICAvLyBjb21wb25lbnQgaXMgc3Vic2NyaWJpbmcgdG8gdGhlIHN0b3JlIGZvciBhbnkgdXBkYXRlIG9ubHkgaWYgaXQgcmVjZWl2ZXMgdGhlICdpZCcgcGFyYW1ldGVyLlxyXG4gICAgLy8gc3Vic2NyaWJlIG1ldGhvZCByZXR1cm4gYSBmdW5jdGlvbiB3aGljaCBpcyB0aGUgdW5zdWJzY3JpYmUgaXRzZWxmIGFuZCBjYW4gYmUgdXNlZCBieSBjb21wb25lbnQgdG8gdW5zdWJzY3JpYmUgb25jZSBpdHMgd29yayBpcyBmaW5pc2ggdG8gYXZvaWQgYW55IG1lbW9lcnkgbGVhay4gICAgXHJcbiAgICBpZiAoaWQpe1xyXG4gICAgICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gbWVldHVwcy5zdWJzY3JpYmUoIGl0ZW1zID0+IHtcclxuICAgICAgICAgICAgdXBkYXRlTWVldHVwID0gaXRlbXMuZmluZCggaXRlbSA9PiBpdGVtLmlkPT09aWQgKTtcclxuICAgICAgICAgICAgdGl0bGUgPSB1cGRhdGVNZWV0dXAudGl0bGU7XHJcbiAgICAgICAgICAgIHN1YnRpdGxlID0gdXBkYXRlTWVldHVwLnN1YnRpdGxlO1xyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IHVwZGF0ZU1lZXR1cC5kZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgaW1nVVJMID0gdXBkYXRlTWVldHVwLmltZ1VSTDtcclxuICAgICAgICAgICAgYWRkcmVzcyA9IHVwZGF0ZU1lZXR1cC5hZGRyZXNzO1xyXG4gICAgICAgICAgICBlbWFpbCA9IHVwZGF0ZU1lZXR1cC5jb250YWN0RW1haWw7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdW5zdWJzY3JpYmUoKTsgIC8vIHVuc3Vic2NyaWJpbmcgdGhlIGNvbXBvbmVudCBhcyBzb29ucyB3ZSB1cGRhdGVkIHRoZSB2YXJpYWJsZSBuZWVkZWQuXHJcbiAgICB9ICAgICAgICBcclxuXHJcbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmVGb3JtKCl7XHJcbiAgICAgICAgbGV0IHNhdmVNZWV0dXBPYmogPSB7fTtcclxuICAgICAgICBzYXZlTWVldHVwT2JqLnRpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgc2F2ZU1lZXR1cE9iai5zdWJ0aXRsZSA9IHN1YnRpdGxlO1xyXG4gICAgICAgIHNhdmVNZWV0dXBPYmouZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuICAgICAgICBzYXZlTWVldHVwT2JqLmltZ1VSTCA9IGltZ1VSTDtcclxuICAgICAgICBzYXZlTWVldHVwT2JqLmFkZHJlc3MgPSBhZGRyZXNzO1xyXG4gICAgICAgIHNhdmVNZWV0dXBPYmouY29udGFjdEVtYWlsID0gZW1haWw7ICAgICAgICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIGlkICl7XHJcbiAgICAgICAgICAgIGZldGNoKCdodHRwczovL3N2ZWx0ZS1jb3Vyc2UtMjBjNWUtZGVmYXVsdC1ydGRiLmZpcmViYXNlaW8uY29tL21lZXR1cHMvJyArIGlkICsnLmpzb24nLCB7XHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQQVRDSCcsICAgIC8vIHN5bnRheCBmb3IgZmlyZWJhc2UgdG8gVVBEQVRFIGV4aXN0aW5nIHJlY29yZC5cclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHNhdmVNZWV0dXBPYmopLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzpcImFwcGxpY2F0aW9uL2pzb25cIiB9XHJcbiAgICAgICAgICAgIH0pLnRoZW4oIHJlcyA9PntcclxuICAgICAgICAgICAgICAgIGlmICggIXJlcy5vayApe1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkhUVFAgVXBkYXRlIE1lZXR1cCBFcnJvclwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG1lZXR1cHMudXBkYXRlTWVldHVwKGlkLCBzYXZlTWVldHVwT2JqKTsgICAgLy8gTG9jYWwgc3RvcmUgdXBkYXRlXHJcbiAgICAgICAgICAgIH0pLmNhdGNoKCBlcnIgPT57XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyAoZXJyKVxyXG4gICAgICAgICAgICB9KTsgICAgICAgICAgICBcclxuICAgICAgICB9ZWxzZXsgICBcclxuICAgICAgICAgICAgc2F2ZU1lZXR1cE9iai5pc0Zhdm9yaXRlID0gZmFsc2U7ICAgICAgICAgXHJcbiAgICAgICAgICAgIGZldGNoKCdodHRwczovL3N2ZWx0ZS1jb3Vyc2UtMjBjNWUtZGVmYXVsdC1ydGRiLmZpcmViYXNlaW8uY29tL21lZXR1cHMuanNvbicsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoc2F2ZU1lZXR1cE9iaiksXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOlwiYXBwbGljYXRpb24vanNvblwiIH1cclxuICAgICAgICAgICAgfSkudGhlbiggcmVzID0+e1xyXG4gICAgICAgICAgICAgICAgaWYgKCAhcmVzLm9rICl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSFRUUCBBZGQgTWVldHVwIEVycm9yXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgICAgICAgIH0pLnRoZW4oIGRhdGEgPT57XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyAoXCJBZGQgbWVldHVwIGRhdGFcIiwgZGF0YSk7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgc2F2ZU1lZXR1cE9iai5pZCA9IGRhdGEubmFtZTsgICAgICAgLy8gaWQgcmV0dXJuZWQgYnkgdGhlIGZpcmViYXNlXHJcbiAgICAgICAgICAgICAgICBtZWV0dXBzLmFkZE1lZXR1cChzYXZlTWVldHVwT2JqKTsgICAvLyBMb2NhbCBzdG9yZSBhZGRcclxuICAgICAgICAgICAgfSkuY2F0Y2goIGVyciA9PntcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nIChlcnIpXHJcbiAgICAgICAgICAgIH0pOyAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBkaXNwYXRjaChcInNhdmVNZWV0dXBcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY2xvc2VNb2RhbCgpe1xyXG4gICAgICAgIGRpc3BhdGNoKFwiY2FuY2VsTW9kYWxcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZGVsZXRlTWVldHVwKCl7XHJcbiAgICAgICAgZmV0Y2goJ2h0dHBzOi8vc3ZlbHRlLWNvdXJzZS0yMGM1ZS1kZWZhdWx0LXJ0ZGIuZmlyZWJhc2Vpby5jb20vbWVldHVwcy8nICsgaWQgKycuanNvbicsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScgICAgLy8gc3ludGF4IGZvciBmaXJlYmFzZSB0byBERUxFVEUgZXhpc3RpbmcgcmVjb3JkLiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSkudGhlbiggcmVzID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICggIXJlcy5vayApe1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkhUVFAgZGVsZXRlIE1lZXR1cCBFcnJvclwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG1lZXR1cHMuZGVsZXRlTWVldHVwKGlkKTsgICAgLy8gTG9jYWwgc3RvcmUgdXBkYXRlXHJcbiAgICAgICAgICAgIH0pLmNhdGNoKCBlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cgKGVycilcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZGlzcGF0Y2goXCJzYXZlTWVldHVwXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBpc0Zvcm1WYWxpZCA9IGZhbHNlO1xyXG4gICAgJDogaXNUaXRsZVZhbGlkID0gIWlzRW1wdHkodGl0bGUpO1xyXG4gICAgJDogaXNTdWJ0aXRsZVZhbGlkID0gIWlzRW1wdHkoc3VidGl0bGUpO1xyXG4gICAgJDogaXNEZXNjVmFsaWQgPSAhaXNFbXB0eShkZXNjcmlwdGlvbik7XHJcbiAgICAkOiBpc0lNR1ZhbGlkID0gdmFsaWRhdGVFbWFpbE9yVVJMKGltZ1VSTCxcInVybFwiKTs7XHJcbiAgICAkOiBpc0FkZHJlc3NWYWxpZCA9ICFpc0VtcHR5KGFkZHJlc3MpO1xyXG4gICAgJDogaXNFbWFpbFZhbGlkID0gdmFsaWRhdGVFbWFpbE9yVVJMKGVtYWlsLFwiZW1haWxcIik7XHJcblxyXG4gICAgJDppc0Zvcm1WYWxpZCA9ICBpc1RpdGxlVmFsaWQgJiYgaXNTdWJ0aXRsZVZhbGlkICYmIGlzRGVzY1ZhbGlkICYmIGlzSU1HVmFsaWQgJiYgaXNBZGRyZXNzVmFsaWQgJiYgaXNFbWFpbFZhbGlkO1xyXG5cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiAgICBmb3Jte1xyXG4gICAgICAgIHdpZHRoOiAxMDAlOyAgICAgICAgXHJcbiAgICB9ICAgIFxyXG48L3N0eWxlPlxyXG5cclxuPE1vZGFsIHRpdGxlPVwiTmV3IE1lZXR1cFwiIG9uOmNhbmNlbE1vZGFsPlxyXG4gICAgPGZvcm0gb246c3VibWl0fHByZXZlbnREZWZhdWx0PVwie3NhdmVGb3JtfVwiPlxyXG4gICAgICAgIDwhLS0gVGV4dElucHV0ICBpcyBhbiBpbmRpdmlkdWFsIGNvbXBvbmVudCB0byBhZGQgZGlmZmVyZXQgdHlwZSBvZiB0ZXh0L3RleHRhcmVhIC0tPlxyXG4gICAgICAgIDxUZXh0SW5wdXQgXHJcbiAgICAgICAgICAgIGlkPVwidGl0bGVcIlxyXG4gICAgICAgICAgICBsYWJlbD1cIlRpdGxlXCJcclxuICAgICAgICAgICAgdmFsdWU9XCJ7dGl0bGV9XCIgXHJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgdmFsaWQ9XCJ7aXNUaXRsZVZhbGlkfVwiICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFsaWRhdHlNZXNzYWdlPVwieyBcIlBsZWFzZSBlbnRlciB0aXRsZVwiIH1cIlxyXG4gICAgICAgICAgICBvbjppbnB1dD17IGV2ZW50ID0+ICh0aXRsZSA9IGV2ZW50LnRhcmdldC52YWx1ZSkgfSAvPlxyXG5cclxuICAgICAgICA8VGV4dElucHV0IFxyXG4gICAgICAgICAgICBpZD1cInN1YnRpdGxlXCJcclxuICAgICAgICAgICAgbGFiZWw9XCJTdWIgVGl0bGVcIlxyXG4gICAgICAgICAgICB2YWx1ZT1cIntzdWJ0aXRsZX1cIlxyXG4gICAgICAgICAgICB2YWxpZD1cIntpc1N1YnRpdGxlVmFsaWR9XCIgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YWxpZGF0eU1lc3NhZ2U9XCJ7IFwiUGxlYXNlIGVudGVyIHN1YnRpdGxlXCIgfVwiICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBvbjppbnB1dD17IGV2ZW50ID0+IChzdWJ0aXRsZSA9IGV2ZW50LnRhcmdldC52YWx1ZSkgfSAvPlxyXG5cclxuICAgICAgICA8VGV4dElucHV0IFxyXG4gICAgICAgICAgICBpZD1cImRlc2NyaXB0aW9uXCJcclxuICAgICAgICAgICAgbGFiZWw9XCJEZXNjcmlwdGlvblwiXHJcbiAgICAgICAgICAgIHZhbHVlPVwie2Rlc2NyaXB0aW9ufVwiIFxyXG4gICAgICAgICAgICBjb250cm9sVHlwZT1cInRleHRhcmVhXCIgICAgICAgICAgIFxyXG4gICAgICAgICAgICByb3dzPVwiM1wiXHJcbiAgICAgICAgICAgIHZhbGlkPVwie2lzRGVzY1ZhbGlkfVwiICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFsaWRhdHlNZXNzYWdlPVwieyBcIlBsZWFzZSBlbnRlciBkZXNjcmlwdGlvblwiIH1cIlxyXG4gICAgICAgICAgICBvbjppbnB1dD17IGV2ZW50ID0+IChkZXNjcmlwdGlvbiA9IGV2ZW50LnRhcmdldC52YWx1ZSkgfSAvPlxyXG4gICAgICAgIFxyXG4gICAgICAgIDxUZXh0SW5wdXQgXHJcbiAgICAgICAgICAgIGlkPVwidXJsXCJcclxuICAgICAgICAgICAgbGFiZWw9XCJJbWFnZSBVUkxcIlxyXG4gICAgICAgICAgICB2YWx1ZT1cIntpbWdVUkx9XCIgXHJcbiAgICAgICAgICAgIHZhbGlkPVwie2lzSU1HVmFsaWR9XCIgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YWxpZGF0eU1lc3NhZ2U9XCJ7IFwiUGxlYXNlIGVudGVyIGltYWdlIHVybFwiIH1cIiAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIG9uOmlucHV0PXsgZXZlbnQgPT4gKGltZ1VSTCA9IGV2ZW50LnRhcmdldC52YWx1ZSkgfSAvPlxyXG4gICAgICAgIFxyXG4gICAgICAgIDxUZXh0SW5wdXQgXHJcbiAgICAgICAgICAgIGlkPVwiYWRkcmVzc1wiXHJcbiAgICAgICAgICAgIGxhYmVsPVwiQWRkcmVzc1wiXHJcbiAgICAgICAgICAgIHZhbHVlPVwie2FkZHJlc3N9XCIgICBcclxuICAgICAgICAgICAgdmFsaWQ9XCJ7aXNBZGRyZXNzVmFsaWR9XCIgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YWxpZGF0eU1lc3NhZ2U9XCJ7IFwiUGxlYXNlIGVudGVyIGFkZHJlc3NcIiB9XCJcclxuICAgICAgICAgICAgb246aW5wdXQ9eyBldmVudCA9PiAoYWRkcmVzcyA9IGV2ZW50LnRhcmdldC52YWx1ZSkgfSAvPlxyXG5cclxuICAgICAgICA8VGV4dElucHV0IFxyXG4gICAgICAgICAgICBpZD1cImVtYWlsSURcIlxyXG4gICAgICAgICAgICBsYWJlbD1cIkUtbWFpbFwiXHJcbiAgICAgICAgICAgIHZhbHVlPVwie2VtYWlsfVwiIFxyXG4gICAgICAgICAgICB0eXBlPVwiZW1haWxcIlxyXG4gICAgICAgICAgICB2YWxpZD1cIntpc0VtYWlsVmFsaWR9XCIgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YWxpZGF0eU1lc3NhZ2U9XCJ7IFwiUGxlYXNlIGVudGVyIGVtYWlsXCIgfVwiICAgICAgICAgICBcclxuICAgICAgICAgICAgb246aW5wdXQ9eyBldmVudCA9PiAoZW1haWwgPSBldmVudC50YXJnZXQudmFsdWUpIH0gLz4gICAgICAgICAgICAgICAgICAgXHJcbiAgICA8L2Zvcm0+XHJcbiAgICA8ZGl2IHNsb3Q9XCJmb290ZXJcIj5cclxuICAgICAgICA8IS0tIEJ1dHRvbiBpcyBhbiBpbmRpdmlkdWFsIGNvbXBvbmVudCB0byBhZGQgZGlmZmVyZXQgYnV0dG9uIG9yIGh5cGVybGluayAtLT5cclxuICAgICAgICA8QnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbjpjbGljaz1cIntjbG9zZU1vZGFsfVwiIG1vZGU9XCJvdXRsaW5lXCI+Q2FuY2VsPC9CdXR0b24+XHJcbiAgICAgICAgPEJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgb246Y2xpY2s9XCJ7c2F2ZUZvcm19XCIgZGlzYWJsZWQ9XCJ7IWlzRm9ybVZhbGlkfVwiID5TYXZlPC9CdXR0b24+XHJcbiAgICAgICAgeyNpZiBpZH1cclxuICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgb246Y2xpY2s9XCJ7ZGVsZXRlTWVldHVwfVwiPkRlbGV0ZTwvQnV0dG9uPlxyXG4gICAgICAgIHsvaWZ9ICAgICBcclxuICAgIDwvZGl2PlxyXG48L01vZGFsPiIsIjxzY3JpcHQ+XHJcbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSAgZnJvbSBcInN2ZWx0ZVwiO1xyXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcclxuICAgIFxyXG4gICAgbGV0IHNlbGVjdGVkRmlsdGVyQnRuID0gMDtcclxuICAgIGZ1bmN0aW9uIGZpbHRlcl9hbGwoKXtcclxuICAgICAgICBzZWxlY3RlZEZpbHRlckJ0biA9IDA7XHJcbiAgICAgICAgZGlzcGF0Y2goJ2ZpbHRlcmJ5JyxzZWxlY3RlZEZpbHRlckJ0bik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZmlsdGVyX2Zhdm9yaXRlcygpe1xyXG4gICAgICAgIHNlbGVjdGVkRmlsdGVyQnRuID0gMTtcclxuICAgICAgICBkaXNwYXRjaCgnZmlsdGVyYnknLHNlbGVjdGVkRmlsdGVyQnRuKTtcclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiAgICBkaXYge1xyXG4gICAgZm9udC1zaXplOiAwcHg7XHJcbiAgICB9XHJcblxyXG4gICAgYnV0dG9uIHtcclxuICAgIGJhY2tncm91bmQ6ICNhYWFhYWE7XHJcbiAgICBmb250OiBpbmhlcml0O1xyXG4gICAgZm9udC1zaXplOiAxcmVtO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2FhYWFhYTtcclxuICAgIHBhZGRpbmc6IDAuNXJlbSAxcmVtO1xyXG4gICAgfVxyXG5cclxuICAgIGJ1dHRvbjpmb2N1cyB7XHJcbiAgICBvdXRsaW5lOiBub25lO1xyXG4gICAgfVxyXG5cclxuICAgIGJ1dHRvbjpmaXJzdC1vZi10eXBlIHtcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweCAwIDAgNXB4O1xyXG4gICAgfVxyXG5cclxuICAgIGJ1dHRvbjpsYXN0LW9mLXR5cGUge1xyXG4gICAgYm9yZGVyLXJhZGl1czogMCA1cHggNXB4IDA7XHJcbiAgICB9XHJcblxyXG4gICAgYnV0dG9uOmhvdmVyLFxyXG4gICAgYnV0dG9uOmFjdGl2ZSxcclxuICAgIC5hY3RpdmUge1xyXG4gICAgYmFja2dyb3VuZDogI2NmMDA1NjtcclxuICAgIGJvcmRlci1jb2xvcjogI2NmMDA1NjtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIH1cclxuXHJcbjwvc3R5bGU+XHJcbjxkaXY+XHJcbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbjpjbGljaz1cIntmaWx0ZXJfYWxsfVwiIGNsYXNzOmFjdGl2ZT1cInsgc2VsZWN0ZWRGaWx0ZXJCdG4gPT0gMH1cIj5BbGw8L2J1dHRvbj5cclxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIG9uOmNsaWNrPVwie2ZpbHRlcl9mYXZvcml0ZXN9XCIgY2xhc3M6YWN0aXZlPVwieyBzZWxlY3RlZEZpbHRlckJ0biA9PSAxfVwiPkZhdm9yaXRlczwvYnV0dG9uPlxyXG48L2Rpdj4iLCJcclxuPHNjcmlwdD5cclxuICAgIGV4cG9ydCBsZXQgY29udHJvbFR5cGUgPSBudWxsO1xyXG4gICAgZXhwb3J0IGxldCBpZDtcclxuICAgIGV4cG9ydCBsZXQgbGFiZWw7XHJcbiAgICBleHBvcnQgbGV0IHZhbHVlO1xyXG4gICAgZXhwb3J0IGxldCB0eXBlID0gXCJ0ZXh0XCI7ICAgIFxyXG4gICAgZXhwb3J0IGxldCByb3dzID0gbnVsbDsgICAgICAgXHJcbiAgICBleHBvcnQgbGV0IHZhbGlkID0gdHJ1ZTtcclxuICAgIGV4cG9ydCBsZXQgdmFsaWRhdHlNZXNzYWdlID0gJyc7XHJcblxyXG4gICAgbGV0IHRvdWNoZWQgPSBmYWxzZTtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiAgICBpbnB1dCxcclxuICAgIHRleHRhcmVhIHtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBmb250OiBpbmhlcml0O1xyXG4gICAgICAgIGJvcmRlcjogbm9uZTtcclxuICAgICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgI2NjYztcclxuICAgICAgICBib3JkZXItcmFkaXVzOiAzcHggM3B4IDAgMDtcclxuICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICAgICAgICBwYWRkaW5nOiAwLjE1cmVtIDAuMjVyZW07XHJcbiAgICAgICAgdHJhbnNpdGlvbjogYm9yZGVyLWNvbG9yIDAuMXMgZWFzZS1vdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgaW5wdXQ6Zm9jdXMsXHJcbiAgICB0ZXh0YXJlYTpmb2N1cyB7XHJcbiAgICAgICAgYm9yZGVyLWNvbG9yOiAjZTQwNzYzO1xyXG4gICAgICAgIG91dGxpbmU6IG5vbmU7XHJcbiAgICB9XHJcblxyXG4gICAgbGFiZWwge1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgIH1cclxuXHJcbiAgICAuZm9ybS1jb250cm9sIHtcclxuICAgICAgICBwYWRkaW5nOiAwLjVyZW0gMDtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBtYXJnaW46IDAuMjVyZW0gMDtcclxuICAgIH1cclxuXHJcbiAgICAuaW52YWxpZHtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZjAwO1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZGUzZTM7XHJcbiAgICB9XHJcblxyXG4gICAgLmVycm9yLW1lc3NhZ2V7XHJcbiAgICAgICAgY29sb3I6ICNmMDA7XHJcbiAgICAgICAgbWFyZ2luOiAwLjI1cmVtIDA7ICAgICAgICBcclxuICAgIH1cclxuPC9zdHlsZT5cclxuXHJcbjxkaXYgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj5cclxuICAgIDxsYWJlbCBmb3I9XCJ7aWR9XCI+e2xhYmVsfTwvbGFiZWw+XHJcbiAgICB7I2lmIGNvbnRyb2xUeXBlID09PSBcInRleHRhcmVhXCJ9XHJcbiAgICAgICAgPHRleHRhcmVhIGNsYXNzOmludmFsaWQ9XCJ7IXZhbGlkICYmIHRvdWNoZWR9XCIgcm93PVwie3Jvd3N9XCIgaWQ9XCJ7aWR9XCIgdmFsdWU9XCJ7dmFsdWV9XCIgb246aW5wdXQgb246Ymx1cj1cInsgKCkgPT4gdG91Y2hlZCA9IHRydWUgfVwiIC8+XHJcbiAgICB7OmVsc2V9XHJcbiAgICAgICAgPGlucHV0IGNsYXNzOmludmFsaWQ9XCJ7IXZhbGlkICYmIHRvdWNoZWR9XCIgdHlwZT1cInt0eXBlfVwiIGlkPVwie2lkfVwiIHZhbHVlPVwie3ZhbHVlfVwiIG9uOmlucHV0IG9uOmJsdXI9XCJ7ICgpID0+IHRvdWNoZWQgPSB0cnVlIH1cIiAvPlxyXG4gICAgey9pZn1cclxuICAgIFxyXG4gICAgeyNpZiAhdmFsaWQgJiYgdmFsaWRhdHlNZXNzYWdlICYmIHRvdWNoZWQgfVxyXG4gICAgICAgIDxwIGNsYXNzPVwiZXJyb3ItbWVzc2FnZVwiPnt2YWxpZGF0eU1lc3NhZ2V9PC9wPlxyXG4gICAgey9pZn1cclxuPC9kaXY+IiwiPHNjcmlwdD5cclxuICAgIGltcG9ydCBCdXR0b24gZnJvbSBcIi4uL1VJL0J1dHRvbi5zdmVsdGVcIjtcclxuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcclxuICAgIGltcG9ydCB7IGZhZGUsIGZseSB9IGZyb20gXCJzdmVsdGUvdHJhbnNpdGlvblwiO1xyXG5cclxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XHJcbiAgICBleHBvcnQgbGV0IHRpdGxlPVwiXCI7XHJcblxyXG4gICAgZnVuY3Rpb24gY2xvc2VNb2RhbCgpe1xyXG4gICAgICAgIGRpc3BhdGNoKFwiY2FuY2VsTW9kYWxcIik7XHJcbiAgICB9XHJcblxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuLm1vZGFsLWJhY2tkcm9wIHtcclxuICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgdG9wOiAwO1xyXG4gIGxlZnQ6IDA7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgaGVpZ2h0OiAxMDB2aDtcclxuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNzUpO1xyXG4gIHotaW5kZXg6IDEwO1xyXG59XHJcblxyXG4ubW9kYWwge1xyXG4gIHBvc2l0aW9uOiBmaXhlZDtcclxuICB0b3A6IDEwdmg7XHJcbiAgbGVmdDogMTAlO1xyXG4gIHdpZHRoOiA4MCU7XHJcbiAgbWF4LWhlaWdodDogODB2aDtcclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgei1pbmRleDogMTAwO1xyXG4gIGJveC1zaGFkb3c6IDAgMnB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMjYpO1xyXG4gIG92ZXJmbG93OiBzY3JvbGw7XHJcbn1cclxuXHJcbmgxIHtcclxuICBwYWRkaW5nOiAxcmVtO1xyXG4gIG1hcmdpbjogMDtcclxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2NjYztcclxuICBmb250LWZhbWlseTogJ1JvYm90byBTbGFiJywgc2Fucy1zZXJpZjtcclxufVxyXG5cclxuLmNvbnRlbnQge1xyXG4gIHBhZGRpbmc6IDFyZW07XHJcbn1cclxuXHJcbmZvb3RlciB7XHJcbiAgcGFkZGluZzogMXJlbTtcclxufVxyXG5cclxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XHJcbiAgLm1vZGFsIHtcclxuICAgIHdpZHRoOiA0MHJlbTtcclxuICAgIGxlZnQ6IGNhbGMoNTAlIC0gMjByZW0pO1xyXG4gIH1cclxufVxyXG5cclxuPC9zdHlsZT5cclxuXHJcbjxkaXYgY2xhc3M9XCJtb2RhbC1iYWNrZHJvcFwiIG9uOmNsaWNrPVwie2Nsb3NlTW9kYWx9XCIgdHJhbnNpdGlvbjpmYWRlPjwvZGl2PlxyXG48ZGl2IGNsYXNzPVwibW9kYWxcIiB0cmFuc2l0aW9uOmZseT1cInt7eTozMDB9fVwiPlxyXG4gICAgPGgxPnt0aXRsZX08L2gxPlxyXG4gICAgPGRpdiBjbGFzcz1cImNvbnRlbnRcIj5cclxuICAgICAgICA8c2xvdCAvPlxyXG4gICAgPC9kaXY+XHJcbiAgICA8Zm9vdGVyPlxyXG4gICAgICAgIDxzbG90IG5hbWU9XCJmb290ZXJcIiA+XHJcbiAgICAgICAgICAgIDxCdXR0b24gb246Y2xpY2s9XCJ7Y2xvc2VNb2RhbH1cIj5DbG9zZTwvQnV0dG9uPlxyXG4gICAgICAgIDwvc2xvdD5cclxuICAgIDwvZm9vdGVyPlxyXG48L2Rpdj4iLCI8c2NyaXB0PlxyXG4gICAgaW1wb3J0IHsgc2xpZGUsZmFkZSB9IGZyb20gXCJzdmVsdGUvdHJhbnNpdGlvblwiO1xyXG48L3NjcmlwdD5cclxuPHN0eWxlPlxyXG4gICAgc3BhbntcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgbWFyZ2luOiAwIDAuMjVyZW07XHJcbiAgICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xyXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNjZjAwNTYgO1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNjZjAwNTY7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgcGFkZGluZzogMCAwLjVyZW07XHJcbiAgICAgICAgZm9udC1mYW1pbHk6ICdMYXRvJywgc2Fucy1zZXJpZjtcclxuICAgICAgICBmb250LXNpemU6IDAuOHJlbTtcclxuICAgIH1cclxuPC9zdHlsZT5cclxuPHNwYW4gdHJhbnNpdGlvbjpmYWRlPlxyXG4gICAgPHNsb3QgLz5cclxuPC9zcGFuPiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNRSxrQkFBSSxDQUFDLEFBQ0MsVUFBVSxDQUFFLElBQUksQUFDcEIsQ0FBQztBQ0FKLGdCQUFFLENBQUUsQ0FBQyxjQUFDLENBQUMsQUFDTixNQUFNLENBQUUsQ0FBQyxDQUFDLElBQUksQUFDZixDQUFDLEFBRUQsRUFBRSxjQUFDLENBQUMsQUFDSCxTQUFTLENBQUUsS0FBSyxDQUNoQixXQUFXLENBQUUsR0FBRyxDQUNoQixNQUFNLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxBQUNwQixDQUFDLEFBRUQsQ0FBQyxjQUFDLENBQUMsQUFDRixNQUFNLENBQUUsR0FBRyxDQUFDLElBQUksQUFDakIsQ0FBQyxBQUVELE1BQU0sQUFBQyxZQUFZLEtBQUssQ0FBQyxBQUFDLENBQUMsQUFDMUIsRUFBRSxjQUFDLENBQUMsQUFDSCxTQUFTLENBQUUs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QUksQ0FDVCxJQUFJLENBQUUsSUFBSSxBQUNkLENBQUMsQUFDRCwwQkFBWSxDQUFDLGlCQUFHLFdBQVcsQ0FBQyxDQUFDLEFBQUMsQ0FBQyxBQUMzQixlQUFlLENBQUUsS0FBSyxDQUN0QixHQUFHLENBQUUsSUFBSSxDQUNULElBQUksQ0FBRSxHQUFHLEFBQ2IsQ0FBQyxBQUNELDBCQUFZLENBQUMsaUJBQUcsV0FBVyxDQUFDLENBQUMsQUFBQyxDQUFDLEFBQzNCLGVBQWUsQ0FBRSxLQUFLLENBQ3RCLEdBQUcsQ0FBRSxJQUFJLENBQ1QsSUFBSSxDQUFFLElBQUksQUFDZCxDQUFDLEFBQ0QsMEJBQVksQ0FBQyxpQkFBRyxXQUFXLENBQUMsQ0FBQyxBQUFDLENBQUMsQUFDM0IsZUFBZSxDQUFFLEtBQUssQ0FDdEIsR0FBRyxDQUFFLElBQUksQ0FDVCxJQUFJLENBQUUsSUFBSSxBQUNkLENBQUMsQUFDRCwwQkFBWSxDQUFDLGlCQUFHLFdBQVcsRUFBRSxDQUFDLEFBQUMsQ0FBQyxBQUM1QixlQUFlLENBQUUsS0FBSyxDQUN0QixHQUFHLENBQUUsSUFBSSxDQUNULElBQUksQ0FBRSxJQUFJLEFBQ2QsQ0FBQyxBQUNELDBCQUFZLENBQUMsaUJBQUcsV0FBVyxFQUFFLENBQUMsQUFBQyxDQUFDLEFBQzVCLGVBQWUsQ0FBRSxHQUFHLENBQ3BCLEdBQUcsQ0FBRSxJQUFJLENBQ1QsSUFBSSxDQUFFLElBQUksQUFDZCxDQUFDLEFBQ0QsMEJBQVksQ0FBQyxpQkFBRyxXQUFXLEVBQUUsQ0FBQyxBQUFDLENBQUMsQUFDNUIsZUFBZSxDQUFFLEtBQUssQ0FDdEIsR0FBRyxDQUFFLElBQUksQ0FDVCxJQUFJLENBQUUsSUFBSSxBQUNkLENBQUMsQUFDRCxXQUFXLHlCQUFZLENBQUMsQUFDdkIsRUFBRSxDQUFFLEdBQUcsQ0FBRSxHQUFHLENBQUUsSUFBSSxBQUFDLENBQUMsQUFDakIsU0FBUyxDQUFFLE1BQU0sQ0FBQyxDQUFDLEFBQ3ZCLENBQUMsQUFDRCxHQUFHLEFBQUMsQ0FBQyxBQUNELFNBQVMsQ0FBRSxNQUFN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 */