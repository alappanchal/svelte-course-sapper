import { S as SvelteComponentDev, i as init, d as dispatch_dev, K as globals, s as safe_not_equal, v as validate_slots, e as element, m as space, t as text, A as create_component, c as claim_element, a as children, f as detach_dev, n as claim_space, b as claim_text, B as claim_component, g as attr_dev, h as add_location, j as insert_dev, k as append_dev, C as mount_component, l as set_data_dev, D as transition_in, E as transition_out, F as destroy_component } from './client.449471b7.js';
import { B as Button } from './Button.560efe97.js';

/* src\routes\[id].svelte generated by Svelte v3.35.0 */

const { Error: Error_1, console: console_1 } = globals;
const file = "src\\routes\\[id].svelte";

// (78:8) <Button href="mailto:{selectedMeetup.contactEmail}">
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Contact");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Contact");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(78:8) <Button href=\\\"mailto:{selectedMeetup.contactEmail}\\\">",
		ctx
	});

	return block;
}

// (79:8) <Button type="button" mode="outline" href="/">
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Back");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Back");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(79:8) <Button type=\\\"button\\\" mode=\\\"outline\\\" href=\\\"/\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let section;
	let div0;
	let img;
	let img_src_value;
	let t0;
	let div1;
	let h1;
	let t1_value = /*selectedMeetup*/ ctx[0].title + "";
	let t1;
	let t2;
	let h2;
	let t3_value = /*selectedMeetup*/ ctx[0].subtitle + "";
	let t3;
	let t4;
	let p;
	let t5_value = /*selectedMeetup*/ ctx[0].description + "";
	let t5;
	let t6;
	let button0;
	let t7;
	let button1;
	let current;

	button0 = new Button({
			props: {
				href: "mailto:" + /*selectedMeetup*/ ctx[0].contactEmail,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button1 = new Button({
			props: {
				type: "button",
				mode: "outline",
				href: "/",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			section = element("section");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div1 = element("div");
			h1 = element("h1");
			t1 = text(t1_value);
			t2 = space();
			h2 = element("h2");
			t3 = text(t3_value);
			t4 = space();
			p = element("p");
			t5 = text(t5_value);
			t6 = space();
			create_component(button0.$$.fragment);
			t7 = space();
			create_component(button1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div0 = claim_element(section_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			img = claim_element(div0_nodes, "IMG", { src: true, alt: true, class: true });
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(section_nodes);
			div1 = claim_element(section_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h1 = claim_element(div1_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, t1_value);
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			h2 = claim_element(div1_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t3 = claim_text(h2_nodes, t3_value);
			h2_nodes.forEach(detach_dev);
			t4 = claim_space(div1_nodes);
			p = claim_element(div1_nodes, "P", { class: true });
			var p_nodes = children(p);
			t5 = claim_text(p_nodes, t5_value);
			p_nodes.forEach(detach_dev);
			t6 = claim_space(div1_nodes);
			claim_component(button0.$$.fragment, div1_nodes);
			t7 = claim_space(div1_nodes);
			claim_component(button1.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*selectedMeetup*/ ctx[0].imgURL)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "");
			attr_dev(img, "class", "svelte-11gfc6t");
			add_location(img, file, 71, 8, 1508);
			attr_dev(div0, "class", "image svelte-11gfc6t");
			add_location(div0, file, 70, 4, 1479);
			attr_dev(h1, "class", "svelte-11gfc6t");
			add_location(h1, file, 74, 8, 1601);
			attr_dev(h2, "class", "svelte-11gfc6t");
			add_location(h2, file, 75, 8, 1642);
			attr_dev(p, "class", "svelte-11gfc6t");
			add_location(p, file, 76, 8, 1686);
			attr_dev(div1, "class", "content svelte-11gfc6t");
			add_location(div1, file, 73, 4, 1570);
			attr_dev(section, "class", "svelte-11gfc6t");
			add_location(section, file, 69, 0, 1464);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div0);
			append_dev(div0, img);
			append_dev(section, t0);
			append_dev(section, div1);
			append_dev(div1, h1);
			append_dev(h1, t1);
			append_dev(div1, t2);
			append_dev(div1, h2);
			append_dev(h2, t3);
			append_dev(div1, t4);
			append_dev(div1, p);
			append_dev(p, t5);
			append_dev(div1, t6);
			mount_component(button0, div1, null);
			append_dev(div1, t7);
			mount_component(button1, div1, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*selectedMeetup*/ 1 && img.src !== (img_src_value = /*selectedMeetup*/ ctx[0].imgURL)) {
				attr_dev(img, "src", img_src_value);
			}

			if ((!current || dirty & /*selectedMeetup*/ 1) && t1_value !== (t1_value = /*selectedMeetup*/ ctx[0].title + "")) set_data_dev(t1, t1_value);
			if ((!current || dirty & /*selectedMeetup*/ 1) && t3_value !== (t3_value = /*selectedMeetup*/ ctx[0].subtitle + "")) set_data_dev(t3, t3_value);
			if ((!current || dirty & /*selectedMeetup*/ 1) && t5_value !== (t5_value = /*selectedMeetup*/ ctx[0].description + "")) set_data_dev(t5, t5_value);
			const button0_changes = {};
			if (dirty & /*selectedMeetup*/ 1) button0_changes.href = "mailto:" + /*selectedMeetup*/ ctx[0].contactEmail;

			if (dirty & /*$$scope*/ 2) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 2) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_component(button0);
			destroy_component(button1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function preload(page) {
	const meetupID = page.params.id;

	return this.fetch("https://svelte-course-20c5e-default-rtdb.firebaseio.com/meetups/" + meetupID + ".json").then(res => {
		if (!res.ok) {
			throw new Error("HTTP Update Favorite Meetup Error");
		}

		return res.json();
	}).then(meetupData => {
		return {
			selectedMeetup: { ...meetupData, id: meetupID }
		};
	}).catch(err => {
		isFavoriteInProgress = false;
		console.log(err);
		this.error(400, "Could not fetch the meetup with id" + meetupID);
	});
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("U5Bidu5D", slots, []);
	let { selectedMeetup } = $$props;
	const writable_props = ["selectedMeetup"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<U5Bidu5D> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("selectedMeetup" in $$props) $$invalidate(0, selectedMeetup = $$props.selectedMeetup);
	};

	$$self.$capture_state = () => ({ preload, Button, selectedMeetup });

	$$self.$inject_state = $$props => {
		if ("selectedMeetup" in $$props) $$invalidate(0, selectedMeetup = $$props.selectedMeetup);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [selectedMeetup];
}

class U5Bidu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { selectedMeetup: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bidu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*selectedMeetup*/ ctx[0] === undefined && !("selectedMeetup" in props)) {
			console_1.warn("<U5Bidu5D> was created without expected prop 'selectedMeetup'");
		}
	}

	get selectedMeetup() {
		throw new Error_1("<U5Bidu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selectedMeetup(value) {
		throw new Error_1("<U5Bidu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bidu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW2lkXS4wZDU2OTQwMS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy9baWRdLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBwcmVsb2FkKHBhZ2Upe1xyXG4gICAgICAgIGNvbnN0IG1lZXR1cElEID0gcGFnZS5wYXJhbXMuaWQ7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKCdodHRwczovL3N2ZWx0ZS1jb3Vyc2UtMjBjNWUtZGVmYXVsdC1ydGRiLmZpcmViYXNlaW8uY29tL21lZXR1cHMvJyArIG1lZXR1cElEICsnLmpzb24nKVxyXG4gICAgICAgICAgICAudGhlbiggcmVzID0+e1xyXG4gICAgICAgICAgICAgICAgaWYgKCAhcmVzLm9rICl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSFRUUCBVcGRhdGUgRmF2b3JpdGUgTWVldHVwIEVycm9yXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9KS50aGVuKCBtZWV0dXBEYXRhID0+e1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc2VsZWN0ZWRNZWV0dXA6IHsuLi5tZWV0dXBEYXRhLCBpZDogbWVldHVwSUR9fVxyXG5cclxuICAgICAgICAgICAgfSkuY2F0Y2goIGVyciA9PntcclxuICAgICAgICAgICAgICAgIGlzRmF2b3JpdGVJblByb2dyZXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyAoZXJyKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcig0MDAsICdDb3VsZCBub3QgZmV0Y2ggdGhlIG1lZXR1cCB3aXRoIGlkJyArIG1lZXR1cElEKTtcclxuICAgICAgICAgICAgfSk7ICAgICAgXHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHNjcmlwdD5cclxuICAgIGltcG9ydCBCdXR0b24gZnJvbSBcIi4uL2NvbXBvbmVudHMvVUkvQnV0dG9uLnN2ZWx0ZVwiOyAgXHJcbiAgICBleHBvcnQgbGV0IHNlbGVjdGVkTWVldHVwOyAgICBcclxuICAgIFxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuICAgIHNlY3Rpb24ge1xyXG4gICAgbWFyZ2luLXRvcDogNHJlbTtcclxuICAgIH1cclxuXHJcbiAgICAuaW1hZ2Uge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDI1cmVtO1xyXG4gICAgfVxyXG5cclxuICAgIGltZyB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogMTAwJTtcclxuICAgIG9iamVjdC1maXQ6IGNvdmVyO1xyXG4gICAgfVxyXG5cclxuICAgIC5pbWFnZSB7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZTdlN2U3O1xyXG4gICAgfVxyXG5cclxuICAgIC5jb250ZW50IHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHdpZHRoOiA4MCU7XHJcbiAgICBtYXJnaW46IGF1dG87XHJcbiAgICB9XHJcblxyXG4gICAgaDEge1xyXG4gICAgZm9udC1zaXplOiAycmVtO1xyXG4gICAgZm9udC1mYW1pbHk6ICdSb2JvdG8gU2xhYicsIHNhbnMtc2VyaWY7XHJcbiAgICBtYXJnaW46IDAuNXJlbSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGgyIHtcclxuICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcclxuICAgIGNvbG9yOiAjNmI2YjZiO1xyXG4gICAgfVxyXG5cclxuICAgIHAge1xyXG4gICAgZm9udC1zaXplOiAxLjVyZW07XHJcbiAgICB9XHJcbjwvc3R5bGU+XHJcblxyXG48c2VjdGlvbj5cclxuICAgIDxkaXYgY2xhc3M9XCJpbWFnZVwiPlxyXG4gICAgICAgIDxpbWcgc3JjPVwie3NlbGVjdGVkTWVldHVwLmltZ1VSTH1cIiBhbHQ9XCJcIiAvPlxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY29udGVudFwiPlxyXG4gICAgICAgIDxoMT57c2VsZWN0ZWRNZWV0dXAudGl0bGV9PC9oMT5cclxuICAgICAgICA8aDI+e3NlbGVjdGVkTWVldHVwLnN1YnRpdGxlfTwvaDI+XHJcbiAgICAgICAgPHA+e3NlbGVjdGVkTWVldHVwLmRlc2NyaXB0aW9ufTwvcD5cclxuICAgICAgICA8QnV0dG9uIGhyZWY9XCJtYWlsdG86e3NlbGVjdGVkTWVldHVwLmNvbnRhY3RFbWFpbH1cIj5Db250YWN0PC9CdXR0b24+XHJcbiAgICAgICAgPEJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgbW9kZT1cIm91dGxpbmVcIiBocmVmPVwiL1wiPkJhY2s8L0J1dHRvbj5cclxuICAgIDwvZGl2PlxyXG48L3NlY3Rpb24+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bUNBMEVhLEdBQWMsSUFBQyxLQUFLOzs7O21DQUNwQixHQUFjLElBQUMsUUFBUTs7OzttQ0FDeEIsR0FBYyxJQUFDLFdBQVc7Ozs7Ozs7Ozs7eUNBQ1IsR0FBYyxJQUFDLFlBQVk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1REFOdEMsR0FBYyxJQUFDLE1BQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21HQUFyQixHQUFjLElBQUMsTUFBTTs7OztpR0FHM0IsR0FBYyxJQUFDLEtBQUs7aUdBQ3BCLEdBQWMsSUFBQyxRQUFRO2lHQUN4QixHQUFjLElBQUMsV0FBVzs7MkZBQ1IsR0FBYyxJQUFDLFlBQVk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NBNUVyQyxPQUFPLENBQUMsSUFBSTtPQUNsQixRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFOztRQUV4QixJQUFJLENBQUMsS0FBSyxDQUFDLGtFQUFrRSxHQUFHLFFBQVEsR0FBRSxPQUFPLEVBQ25HLElBQUksQ0FBRSxHQUFHO09BQ0EsR0FBRyxDQUFDLEVBQUU7YUFDRSxLQUFLLENBQUMsbUNBQW1DOzs7U0FFaEQsR0FBRyxDQUFDLElBQUk7SUFDaEIsSUFBSSxDQUFFLFVBQVU7O0dBQ04sY0FBYyxPQUFNLFVBQVUsRUFBRSxFQUFFLEVBQUUsUUFBUTs7SUFFdEQsS0FBSyxDQUFFLEdBQUc7RUFDVCxvQkFBb0IsR0FBRyxLQUFLO0VBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUUsR0FBRztFQUNoQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxvQ0FBb0MsR0FBRyxRQUFROzs7Ozs7O09BT2hFLGNBQWM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
