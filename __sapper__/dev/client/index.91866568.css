input.svelte-sc5id5,textarea.svelte-sc5id5{display:block;width:100%;font:inherit;border:none;border-bottom:2px solid #ccc;border-radius:3px 3px 0 0;background:white;padding:0.15rem 0.25rem;transition:border-color 0.1s ease-out}input.svelte-sc5id5:focus,textarea.svelte-sc5id5:focus{border-color:#e40763;outline:none}label.svelte-sc5id5{display:block;margin-bottom:0.5rem;width:100%}.form-control.svelte-sc5id5{padding:0.5rem 0;width:100%;margin:0.25rem 0}.invalid.svelte-sc5id5{border:1px solid #f00;background-color:#fde3e3}.error-message.svelte-sc5id5{color:#f00;margin:0.25rem 0}
.modal-backdrop.svelte-utgw0y{position:fixed;top:0;left:0;width:100%;height:100vh;background:rgba(0, 0, 0, 0.75);z-index:10}.modal.svelte-utgw0y{position:fixed;top:10vh;left:10%;width:80%;max-height:80vh;background:white;border-radius:5px;z-index:100;box-shadow:0 2px 8px rgba(0, 0, 0, 0.26);overflow:scroll}h1.svelte-utgw0y{padding:1rem;margin:0;border-bottom:1px solid #ccc;font-family:'Roboto Slab', sans-serif}.content.svelte-utgw0y{padding:1rem}footer.svelte-utgw0y{padding:1rem}@media(min-width: 768px){.modal.svelte-utgw0y{width:40rem;left:calc(50% - 20rem)}}
form.svelte-7xgq1w{width:100%}
span.svelte-pdghry{display:inline-block;margin:0 0.25rem;border-radius:3px;border:1px solid #cf0056 ;background-color:#cf0056;color:#fff;padding:0 0.5rem;font-family:'Lato', sans-serif;font-size:0.8rem}
article.svelte-ys5sx3.svelte-ys5sx3{box-shadow:0 2px 8px rgba(0, 0, 0, 0.26);border-radius:5px;background:white;margin:1rem}header.svelte-ys5sx3.svelte-ys5sx3,.content.svelte-ys5sx3.svelte-ys5sx3,footer.svelte-ys5sx3.svelte-ys5sx3{padding:1rem}.image.svelte-ys5sx3.svelte-ys5sx3{width:100%;height:14rem}.image.svelte-ys5sx3 img.svelte-ys5sx3{width:100%;height:100%;object-fit:cover}h1.svelte-ys5sx3.svelte-ys5sx3{font-size:1.25rem;margin:0.5rem 0;font-family:"Roboto Slab", sans-serif}h2.svelte-ys5sx3.svelte-ys5sx3{font-size:1rem;color:#808080;margin:0.5rem 0}p.svelte-ys5sx3.svelte-ys5sx3{font-size:1.25rem;margin:0}div.svelte-ys5sx3.svelte-ys5sx3{text-align:right}.content.svelte-ys5sx3.svelte-ys5sx3{height:4rem;;}
div.svelte-1iaz0ri{font-size:0px}button.svelte-1iaz0ri{background:#aaaaaa;font:inherit;font-size:1rem;cursor:pointer;border:1px solid #aaaaaa;padding:0.5rem 1rem}button.svelte-1iaz0ri:focus{outline:none}button.svelte-1iaz0ri:first-of-type{border-radius:5px 0 0 5px}button.svelte-1iaz0ri:last-of-type{border-radius:0 5px 5px 0}button.svelte-1iaz0ri:hover,button.svelte-1iaz0ri:active,.active.svelte-1iaz0ri{background:#cf0056;border-color:#cf0056;color:white}
.loadingContainer.svelte-6kkc0y.svelte-6kkc0y{display:flex;align-items:center;justify-content:center;margin:2rem;height:50vh}.loadingContainer.svelte-6kkc0y p.svelte-6kkc0y{display:block;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);color:#cf0056
    }.lds-default.svelte-6kkc0y.svelte-6kkc0y{display:inline-block;position:relative;width:80px;height:80px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y{position:absolute;width:6px;height:6px;background:#cf0056;border-radius:50%;animation:svelte-6kkc0y-lds-default 1.2s linear infinite}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(1){animation-delay:0s;top:37px;left:66px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(2){animation-delay:-0.1s;top:22px;left:62px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(3){animation-delay:-0.2s;top:11px;left:52px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(4){animation-delay:-0.3s;top:7px;left:37px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(5){animation-delay:-0.4s;top:11px;left:22px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(6){animation-delay:-0.5s;top:22px;left:11px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(7){animation-delay:-0.6s;top:37px;left:7px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(8){animation-delay:-0.7s;top:52px;left:11px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(9){animation-delay:-0.8s;top:62px;left:22px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(10){animation-delay:-0.9s;top:66px;left:37px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(11){animation-delay:-1s;top:62px;left:52px}.lds-default.svelte-6kkc0y div.svelte-6kkc0y:nth-child(12){animation-delay:-1.1s;top:52px;left:62px}@keyframes svelte-6kkc0y-lds-default{0%,20%,80%,100%{transform:scale(1)}50%{transform:scale(1.5)}}
#meetups.svelte-1bgku22{width:100%;display:grid;grid-template-columns:1fr;grid-gap:1rem}#meetup-controls.svelte-1bgku22{margin:1rem;display:flex;justify-content:space-between}@media(min-width: 768px){#meetups.svelte-1bgku22{grid-template-columns:repeat(2, 1fr)}}.no-message.svelte-1bgku22{margin:1rem}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguOTE4NjY1NjguY3NzIiwic291cmNlcyI6WyIuLi8uLi8uLi9UZXh0SW5wdXQuc3ZlbHRlIiwiLi4vLi4vLi4vTW9kYWwuc3ZlbHRlIiwiLi4vLi4vLi4vRWRpdE1lZXR1cC5zdmVsdGUiLCIuLi8uLi8uLi9CYWRnZS5zdmVsdGUiLCIuLi8uLi8uLi9NZWV0dXBJdGVtLnN2ZWx0ZSIsIi4uLy4uLy4uL0ZpbHRlcmVkTWVldHVwLnN2ZWx0ZSIsIi4uLy4uLy4uL0xvYWRpbmdTcGlubmVyLnN2ZWx0ZSIsIi4uLy4uLy4uL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxuPHNjcmlwdD5cclxuICAgIGV4cG9ydCBsZXQgY29udHJvbFR5cGUgPSBudWxsO1xyXG4gICAgZXhwb3J0IGxldCBpZDtcclxuICAgIGV4cG9ydCBsZXQgbGFiZWw7XHJcbiAgICBleHBvcnQgbGV0IHZhbHVlO1xyXG4gICAgZXhwb3J0IGxldCB0eXBlID0gXCJ0ZXh0XCI7ICAgIFxyXG4gICAgZXhwb3J0IGxldCByb3dzID0gbnVsbDsgICAgICAgXHJcbiAgICBleHBvcnQgbGV0IHZhbGlkID0gdHJ1ZTtcclxuICAgIGV4cG9ydCBsZXQgdmFsaWRhdHlNZXNzYWdlID0gJyc7XHJcblxyXG4gICAgbGV0IHRvdWNoZWQgPSBmYWxzZTtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiAgICBpbnB1dCxcclxuICAgIHRleHRhcmVhIHtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBmb250OiBpbmhlcml0O1xyXG4gICAgICAgIGJvcmRlcjogbm9uZTtcclxuICAgICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgI2NjYztcclxuICAgICAgICBib3JkZXItcmFkaXVzOiAzcHggM3B4IDAgMDtcclxuICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICAgICAgICBwYWRkaW5nOiAwLjE1cmVtIDAuMjVyZW07XHJcbiAgICAgICAgdHJhbnNpdGlvbjogYm9yZGVyLWNvbG9yIDAuMXMgZWFzZS1vdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgaW5wdXQ6Zm9jdXMsXHJcbiAgICB0ZXh0YXJlYTpmb2N1cyB7XHJcbiAgICAgICAgYm9yZGVyLWNvbG9yOiAjZTQwNzYzO1xyXG4gICAgICAgIG91dGxpbmU6IG5vbmU7XHJcbiAgICB9XHJcblxyXG4gICAgbGFiZWwge1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgIH1cclxuXHJcbiAgICAuZm9ybS1jb250cm9sIHtcclxuICAgICAgICBwYWRkaW5nOiAwLjVyZW0gMDtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBtYXJnaW46IDAuMjVyZW0gMDtcclxuICAgIH1cclxuXHJcbiAgICAuaW52YWxpZHtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZjAwO1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZGUzZTM7XHJcbiAgICB9XHJcblxyXG4gICAgLmVycm9yLW1lc3NhZ2V7XHJcbiAgICAgICAgY29sb3I6ICNmMDA7XHJcbiAgICAgICAgbWFyZ2luOiAwLjI1cmVtIDA7ICAgICAgICBcclxuICAgIH1cclxuPC9zdHlsZT5cclxuXHJcbjxkaXYgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj5cclxuICAgIDxsYWJlbCBmb3I9XCJ7aWR9XCI+e2xhYmVsfTwvbGFiZWw+XHJcbiAgICB7I2lmIGNvbnRyb2xUeXBlID09PSBcInRleHRhcmVhXCJ9XHJcbiAgICAgICAgPHRleHRhcmVhIGNsYXNzOmludmFsaWQ9XCJ7IXZhbGlkICYmIHRvdWNoZWR9XCIgcm93PVwie3Jvd3N9XCIgaWQ9XCJ7aWR9XCIgdmFsdWU9XCJ7dmFsdWV9XCIgb246aW5wdXQgb246Ymx1cj1cInsgKCkgPT4gdG91Y2hlZCA9IHRydWUgfVwiIC8+XHJcbiAgICB7OmVsc2V9XHJcbiAgICAgICAgPGlucHV0IGNsYXNzOmludmFsaWQ9XCJ7IXZhbGlkICYmIHRvdWNoZWR9XCIgdHlwZT1cInt0eXBlfVwiIGlkPVwie2lkfVwiIHZhbHVlPVwie3ZhbHVlfVwiIG9uOmlucHV0IG9uOmJsdXI9XCJ7ICgpID0+IHRvdWNoZWQgPSB0cnVlIH1cIiAvPlxyXG4gICAgey9pZn1cclxuICAgIFxyXG4gICAgeyNpZiAhdmFsaWQgJiYgdmFsaWRhdHlNZXNzYWdlICYmIHRvdWNoZWQgfVxyXG4gICAgICAgIDxwIGNsYXNzPVwiZXJyb3ItbWVzc2FnZVwiPnt2YWxpZGF0eU1lc3NhZ2V9PC9wPlxyXG4gICAgey9pZn1cclxuPC9kaXY+IiwiPHNjcmlwdD5cclxuICAgIGltcG9ydCBCdXR0b24gZnJvbSBcIi4uL1VJL0J1dHRvbi5zdmVsdGVcIjtcclxuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcclxuICAgIGltcG9ydCB7IGZhZGUsIGZseSB9IGZyb20gXCJzdmVsdGUvdHJhbnNpdGlvblwiO1xyXG5cclxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XHJcbiAgICBleHBvcnQgbGV0IHRpdGxlPVwiXCI7XHJcblxyXG4gICAgZnVuY3Rpb24gY2xvc2VNb2RhbCgpe1xyXG4gICAgICAgIGRpc3BhdGNoKFwiY2FuY2VsTW9kYWxcIik7XHJcbiAgICB9XHJcblxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuLm1vZGFsLWJhY2tkcm9wIHtcclxuICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgdG9wOiAwO1xyXG4gIGxlZnQ6IDA7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgaGVpZ2h0OiAxMDB2aDtcclxuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNzUpO1xyXG4gIHotaW5kZXg6IDEwO1xyXG59XHJcblxyXG4ubW9kYWwge1xyXG4gIHBvc2l0aW9uOiBmaXhlZDtcclxuICB0b3A6IDEwdmg7XHJcbiAgbGVmdDogMTAlO1xyXG4gIHdpZHRoOiA4MCU7XHJcbiAgbWF4LWhlaWdodDogODB2aDtcclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgei1pbmRleDogMTAwO1xyXG4gIGJveC1zaGFkb3c6IDAgMnB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMjYpO1xyXG4gIG92ZXJmbG93OiBzY3JvbGw7XHJcbn1cclxuXHJcbmgxIHtcclxuICBwYWRkaW5nOiAxcmVtO1xyXG4gIG1hcmdpbjogMDtcclxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2NjYztcclxuICBmb250LWZhbWlseTogJ1JvYm90byBTbGFiJywgc2Fucy1zZXJpZjtcclxufVxyXG5cclxuLmNvbnRlbnQge1xyXG4gIHBhZGRpbmc6IDFyZW07XHJcbn1cclxuXHJcbmZvb3RlciB7XHJcbiAgcGFkZGluZzogMXJlbTtcclxufVxyXG5cclxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XHJcbiAgLm1vZGFsIHtcclxuICAgIHdpZHRoOiA0MHJlbTtcclxuICAgIGxlZnQ6IGNhbGMoNTAlIC0gMjByZW0pO1xyXG4gIH1cclxufVxyXG5cclxuPC9zdHlsZT5cclxuXHJcbjxkaXYgY2xhc3M9XCJtb2RhbC1iYWNrZHJvcFwiIG9uOmNsaWNrPVwie2Nsb3NlTW9kYWx9XCIgdHJhbnNpdGlvbjpmYWRlPjwvZGl2PlxyXG48ZGl2IGNsYXNzPVwibW9kYWxcIiB0cmFuc2l0aW9uOmZseT1cInt7eTozMDB9fVwiPlxyXG4gICAgPGgxPnt0aXRsZX08L2gxPlxyXG4gICAgPGRpdiBjbGFzcz1cImNvbnRlbnRcIj5cclxuICAgICAgICA8c2xvdCAvPlxyXG4gICAgPC9kaXY+XHJcbiAgICA8Zm9vdGVyPlxyXG4gICAgICAgIDxzbG90IG5hbWU9XCJmb290ZXJcIiA+XHJcbiAgICAgICAgICAgIDxCdXR0b24gb246Y2xpY2s9XCJ7Y2xvc2VNb2RhbH1cIj5DbG9zZTwvQnV0dG9uPlxyXG4gICAgICAgIDwvc2xvdD5cclxuICAgIDwvZm9vdGVyPlxyXG48L2Rpdj4iLCI8c2NyaXB0PlxyXG4gICAgaW1wb3J0IFRleHRJbnB1dCBmcm9tIFwiLi4vVUkvVGV4dElucHV0LnN2ZWx0ZVwiO1xyXG4gICAgaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vVUkvQnV0dG9uLnN2ZWx0ZVwiOyBcclxuICAgIGltcG9ydCBNb2RhbCBmcm9tIFwiLi4vVUkvTW9kYWwuc3ZlbHRlXCI7XHJcbiAgICBpbXBvcnQgeyBpc0VtcHR5LCB2YWxpZGF0ZUVtYWlsT3JVUkwgfSBmcm9tIFwiLi4vLi4vaGVscGVycy92YWxpZGF0aW9uLmpzXCI7XHJcbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XHJcbiAgICBpbXBvcnQgbWVldHVwcyBmcm9tIFwiLi4vLi4vLi4vc3JjL21lZXR1cHMtc3RvcmVcIjsgICAvLyBzdG9yZVxyXG5cclxuICAgIGV4cG9ydCBsZXQgaWQgPSBudWxsO1xyXG4gICAgXHJcbiAgICBsZXQgdGl0bGU9XCJcIjtcclxuICAgIGxldCBzdWJ0aXRsZT1cIlwiO1xyXG4gICAgbGV0IGRlc2NyaXB0aW9uPVwiXCI7XHJcbiAgICBsZXQgaW1nVVJMPVwiXCI7XHJcbiAgICBsZXQgYWRkcmVzcz1cIlwiO1xyXG4gICAgbGV0IGVtYWlsPVwiXCI7XHJcbiAgICBsZXQgdXBkYXRlTWVldHVwID0ge307ICAgIFxyXG5cclxuICAgIC8vIGNvbXBvbmVudCBpcyBzdWJzY3JpYmluZyB0byB0aGUgc3RvcmUgZm9yIGFueSB1cGRhdGUgb25seSBpZiBpdCByZWNlaXZlcyB0aGUgJ2lkJyBwYXJhbWV0ZXIuXHJcbiAgICAvLyBzdWJzY3JpYmUgbWV0aG9kIHJldHVybiBhIGZ1bmN0aW9uIHdoaWNoIGlzIHRoZSB1bnN1YnNjcmliZSBpdHNlbGYgYW5kIGNhbiBiZSB1c2VkIGJ5IGNvbXBvbmVudCB0byB1bnN1YnNjcmliZSBvbmNlIGl0cyB3b3JrIGlzIGZpbmlzaCB0byBhdm9pZCBhbnkgbWVtb2VyeSBsZWFrLiAgICBcclxuICAgIGlmIChpZCl7XHJcbiAgICAgICAgY29uc3QgdW5zdWJzY3JpYmUgPSBtZWV0dXBzLnN1YnNjcmliZSggaXRlbXMgPT4ge1xyXG4gICAgICAgICAgICB1cGRhdGVNZWV0dXAgPSBpdGVtcy5maW5kKCBpdGVtID0+IGl0ZW0uaWQ9PT1pZCApO1xyXG4gICAgICAgICAgICB0aXRsZSA9IHVwZGF0ZU1lZXR1cC50aXRsZTtcclxuICAgICAgICAgICAgc3VidGl0bGUgPSB1cGRhdGVNZWV0dXAuc3VidGl0bGU7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gdXBkYXRlTWVldHVwLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICBpbWdVUkwgPSB1cGRhdGVNZWV0dXAuaW1nVVJMO1xyXG4gICAgICAgICAgICBhZGRyZXNzID0gdXBkYXRlTWVldHVwLmFkZHJlc3M7XHJcbiAgICAgICAgICAgIGVtYWlsID0gdXBkYXRlTWVldHVwLmNvbnRhY3RFbWFpbDtcclxuICAgICAgICB9KTtcclxuICAgICAgICB1bnN1YnNjcmliZSgpOyAgLy8gdW5zdWJzY3JpYmluZyB0aGUgY29tcG9uZW50IGFzIHNvb25zIHdlIHVwZGF0ZWQgdGhlIHZhcmlhYmxlIG5lZWRlZC5cclxuICAgIH0gICAgICAgIFxyXG5cclxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XHJcblxyXG4gICAgZnVuY3Rpb24gc2F2ZUZvcm0oKXtcclxuICAgICAgICBsZXQgc2F2ZU1lZXR1cE9iaiA9IHt9O1xyXG4gICAgICAgIHNhdmVNZWV0dXBPYmoudGl0bGUgPSB0aXRsZTtcclxuICAgICAgICBzYXZlTWVldHVwT2JqLnN1YnRpdGxlID0gc3VidGl0bGU7XHJcbiAgICAgICAgc2F2ZU1lZXR1cE9iai5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xyXG4gICAgICAgIHNhdmVNZWV0dXBPYmouaW1nVVJMID0gaW1nVVJMO1xyXG4gICAgICAgIHNhdmVNZWV0dXBPYmouYWRkcmVzcyA9IGFkZHJlc3M7XHJcbiAgICAgICAgc2F2ZU1lZXR1cE9iai5jb250YWN0RW1haWwgPSBlbWFpbDsgICAgICAgICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICggaWQgKXtcclxuICAgICAgICAgICAgZmV0Y2goJ2h0dHBzOi8vc3ZlbHRlLWNvdXJzZS0yMGM1ZS1kZWZhdWx0LXJ0ZGIuZmlyZWJhc2Vpby5jb20vbWVldHVwcy8nICsgaWQgKycuanNvbicsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BBVENIJywgICAgLy8gc3ludGF4IGZvciBmaXJlYmFzZSB0byBVUERBVEUgZXhpc3RpbmcgcmVjb3JkLlxyXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoc2F2ZU1lZXR1cE9iaiksXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOlwiYXBwbGljYXRpb24vanNvblwiIH1cclxuICAgICAgICAgICAgfSkudGhlbiggcmVzID0+e1xyXG4gICAgICAgICAgICAgICAgaWYgKCAhcmVzLm9rICl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSFRUUCBVcGRhdGUgTWVldHVwIEVycm9yXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbWVldHVwcy51cGRhdGVNZWV0dXAoaWQsIHNhdmVNZWV0dXBPYmopOyAgICAvLyBMb2NhbCBzdG9yZSB1cGRhdGVcclxuICAgICAgICAgICAgfSkuY2F0Y2goIGVyciA9PntcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nIChlcnIpXHJcbiAgICAgICAgICAgIH0pOyAgICAgICAgICAgIFxyXG4gICAgICAgIH1lbHNleyAgIFxyXG4gICAgICAgICAgICBzYXZlTWVldHVwT2JqLmlzRmF2b3JpdGUgPSBmYWxzZTsgICAgICAgICBcclxuICAgICAgICAgICAgZmV0Y2goJ2h0dHBzOi8vc3ZlbHRlLWNvdXJzZS0yMGM1ZS1kZWZhdWx0LXJ0ZGIuZmlyZWJhc2Vpby5jb20vbWVldHVwcy5qc29uJywge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShzYXZlTWVldHVwT2JqKSxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6XCJhcHBsaWNhdGlvbi9qc29uXCIgfVxyXG4gICAgICAgICAgICB9KS50aGVuKCByZXMgPT57XHJcbiAgICAgICAgICAgICAgICBpZiAoICFyZXMub2sgKXtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJIVFRQIEFkZCBNZWV0dXAgRXJyb3JcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgICAgICAgfSkudGhlbiggZGF0YSA9PntcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nIChcIkFkZCBtZWV0dXAgZGF0YVwiLCBkYXRhKTsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBzYXZlTWVldHVwT2JqLmlkID0gZGF0YS5uYW1lOyAgICAgICAvLyBpZCByZXR1cm5lZCBieSB0aGUgZmlyZWJhc2VcclxuICAgICAgICAgICAgICAgIG1lZXR1cHMuYWRkTWVldHVwKHNhdmVNZWV0dXBPYmopOyAgIC8vIExvY2FsIHN0b3JlIGFkZFxyXG4gICAgICAgICAgICB9KS5jYXRjaCggZXJyID0+e1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cgKGVycilcclxuICAgICAgICAgICAgfSk7ICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGRpc3BhdGNoKFwic2F2ZU1lZXR1cFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjbG9zZU1vZGFsKCl7XHJcbiAgICAgICAgZGlzcGF0Y2goXCJjYW5jZWxNb2RhbFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkZWxldGVNZWV0dXAoKXtcclxuICAgICAgICBmZXRjaCgnaHR0cHM6Ly9zdmVsdGUtY291cnNlLTIwYzVlLWRlZmF1bHQtcnRkYi5maXJlYmFzZWlvLmNvbS9tZWV0dXBzLycgKyBpZCArJy5qc29uJywge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyAgICAvLyBzeW50YXggZm9yIGZpcmViYXNlIHRvIERFTEVURSBleGlzdGluZyByZWNvcmQuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9KS50aGVuKCByZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCAhcmVzLm9rICl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSFRUUCBkZWxldGUgTWVldHVwIEVycm9yXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbWVldHVwcy5kZWxldGVNZWV0dXAoaWQpOyAgICAvLyBMb2NhbCBzdG9yZSB1cGRhdGVcclxuICAgICAgICAgICAgfSkuY2F0Y2goIGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyAoZXJyKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBkaXNwYXRjaChcInNhdmVNZWV0dXBcIik7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGlzRm9ybVZhbGlkID0gZmFsc2U7XHJcbiAgICAkOiBpc1RpdGxlVmFsaWQgPSAhaXNFbXB0eSh0aXRsZSk7XHJcbiAgICAkOiBpc1N1YnRpdGxlVmFsaWQgPSAhaXNFbXB0eShzdWJ0aXRsZSk7XHJcbiAgICAkOiBpc0Rlc2NWYWxpZCA9ICFpc0VtcHR5KGRlc2NyaXB0aW9uKTtcclxuICAgICQ6IGlzSU1HVmFsaWQgPSB2YWxpZGF0ZUVtYWlsT3JVUkwoaW1nVVJMLFwidXJsXCIpOztcclxuICAgICQ6IGlzQWRkcmVzc1ZhbGlkID0gIWlzRW1wdHkoYWRkcmVzcyk7XHJcbiAgICAkOiBpc0VtYWlsVmFsaWQgPSB2YWxpZGF0ZUVtYWlsT3JVUkwoZW1haWwsXCJlbWFpbFwiKTtcclxuXHJcbiAgICAkOmlzRm9ybVZhbGlkID0gIGlzVGl0bGVWYWxpZCAmJiBpc1N1YnRpdGxlVmFsaWQgJiYgaXNEZXNjVmFsaWQgJiYgaXNJTUdWYWxpZCAmJiBpc0FkZHJlc3NWYWxpZCAmJiBpc0VtYWlsVmFsaWQ7XHJcblxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuICAgIGZvcm17XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7ICAgICAgICBcclxuICAgIH0gICAgXHJcbjwvc3R5bGU+XHJcblxyXG48TW9kYWwgdGl0bGU9XCJOZXcgTWVldHVwXCIgb246Y2FuY2VsTW9kYWw+XHJcbiAgICA8Zm9ybSBvbjpzdWJtaXR8cHJldmVudERlZmF1bHQ9XCJ7c2F2ZUZvcm19XCI+XHJcbiAgICAgICAgPCEtLSBUZXh0SW5wdXQgIGlzIGFuIGluZGl2aWR1YWwgY29tcG9uZW50IHRvIGFkZCBkaWZmZXJldCB0eXBlIG9mIHRleHQvdGV4dGFyZWEgLS0+XHJcbiAgICAgICAgPFRleHRJbnB1dCBcclxuICAgICAgICAgICAgaWQ9XCJ0aXRsZVwiXHJcbiAgICAgICAgICAgIGxhYmVsPVwiVGl0bGVcIlxyXG4gICAgICAgICAgICB2YWx1ZT1cInt0aXRsZX1cIiBcclxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICB2YWxpZD1cIntpc1RpdGxlVmFsaWR9XCIgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YWxpZGF0eU1lc3NhZ2U9XCJ7IFwiUGxlYXNlIGVudGVyIHRpdGxlXCIgfVwiXHJcbiAgICAgICAgICAgIG9uOmlucHV0PXsgZXZlbnQgPT4gKHRpdGxlID0gZXZlbnQudGFyZ2V0LnZhbHVlKSB9IC8+XHJcblxyXG4gICAgICAgIDxUZXh0SW5wdXQgXHJcbiAgICAgICAgICAgIGlkPVwic3VidGl0bGVcIlxyXG4gICAgICAgICAgICBsYWJlbD1cIlN1YiBUaXRsZVwiXHJcbiAgICAgICAgICAgIHZhbHVlPVwie3N1YnRpdGxlfVwiXHJcbiAgICAgICAgICAgIHZhbGlkPVwie2lzU3VidGl0bGVWYWxpZH1cIiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhbGlkYXR5TWVzc2FnZT1cInsgXCJQbGVhc2UgZW50ZXIgc3VidGl0bGVcIiB9XCIgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIG9uOmlucHV0PXsgZXZlbnQgPT4gKHN1YnRpdGxlID0gZXZlbnQudGFyZ2V0LnZhbHVlKSB9IC8+XHJcblxyXG4gICAgICAgIDxUZXh0SW5wdXQgXHJcbiAgICAgICAgICAgIGlkPVwiZGVzY3JpcHRpb25cIlxyXG4gICAgICAgICAgICBsYWJlbD1cIkRlc2NyaXB0aW9uXCJcclxuICAgICAgICAgICAgdmFsdWU9XCJ7ZGVzY3JpcHRpb259XCIgXHJcbiAgICAgICAgICAgIGNvbnRyb2xUeXBlPVwidGV4dGFyZWFcIiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJvd3M9XCIzXCJcclxuICAgICAgICAgICAgdmFsaWQ9XCJ7aXNEZXNjVmFsaWR9XCIgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YWxpZGF0eU1lc3NhZ2U9XCJ7IFwiUGxlYXNlIGVudGVyIGRlc2NyaXB0aW9uXCIgfVwiXHJcbiAgICAgICAgICAgIG9uOmlucHV0PXsgZXZlbnQgPT4gKGRlc2NyaXB0aW9uID0gZXZlbnQudGFyZ2V0LnZhbHVlKSB9IC8+XHJcbiAgICAgICAgXHJcbiAgICAgICAgPFRleHRJbnB1dCBcclxuICAgICAgICAgICAgaWQ9XCJ1cmxcIlxyXG4gICAgICAgICAgICBsYWJlbD1cIkltYWdlIFVSTFwiXHJcbiAgICAgICAgICAgIHZhbHVlPVwie2ltZ1VSTH1cIiBcclxuICAgICAgICAgICAgdmFsaWQ9XCJ7aXNJTUdWYWxpZH1cIiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhbGlkYXR5TWVzc2FnZT1cInsgXCJQbGVhc2UgZW50ZXIgaW1hZ2UgdXJsXCIgfVwiICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgb246aW5wdXQ9eyBldmVudCA9PiAoaW1nVVJMID0gZXZlbnQudGFyZ2V0LnZhbHVlKSB9IC8+XHJcbiAgICAgICAgXHJcbiAgICAgICAgPFRleHRJbnB1dCBcclxuICAgICAgICAgICAgaWQ9XCJhZGRyZXNzXCJcclxuICAgICAgICAgICAgbGFiZWw9XCJBZGRyZXNzXCJcclxuICAgICAgICAgICAgdmFsdWU9XCJ7YWRkcmVzc31cIiAgIFxyXG4gICAgICAgICAgICB2YWxpZD1cIntpc0FkZHJlc3NWYWxpZH1cIiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhbGlkYXR5TWVzc2FnZT1cInsgXCJQbGVhc2UgZW50ZXIgYWRkcmVzc1wiIH1cIlxyXG4gICAgICAgICAgICBvbjppbnB1dD17IGV2ZW50ID0+IChhZGRyZXNzID0gZXZlbnQudGFyZ2V0LnZhbHVlKSB9IC8+XHJcblxyXG4gICAgICAgIDxUZXh0SW5wdXQgXHJcbiAgICAgICAgICAgIGlkPVwiZW1haWxJRFwiXHJcbiAgICAgICAgICAgIGxhYmVsPVwiRS1tYWlsXCJcclxuICAgICAgICAgICAgdmFsdWU9XCJ7ZW1haWx9XCIgXHJcbiAgICAgICAgICAgIHR5cGU9XCJlbWFpbFwiXHJcbiAgICAgICAgICAgIHZhbGlkPVwie2lzRW1haWxWYWxpZH1cIiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhbGlkYXR5TWVzc2FnZT1cInsgXCJQbGVhc2UgZW50ZXIgZW1haWxcIiB9XCIgICAgICAgICAgIFxyXG4gICAgICAgICAgICBvbjppbnB1dD17IGV2ZW50ID0+IChlbWFpbCA9IGV2ZW50LnRhcmdldC52YWx1ZSkgfSAvPiAgICAgICAgICAgICAgICAgICBcclxuICAgIDwvZm9ybT5cclxuICAgIDxkaXYgc2xvdD1cImZvb3RlclwiPlxyXG4gICAgICAgIDwhLS0gQnV0dG9uIGlzIGFuIGluZGl2aWR1YWwgY29tcG9uZW50IHRvIGFkZCBkaWZmZXJldCBidXR0b24gb3IgaHlwZXJsaW5rIC0tPlxyXG4gICAgICAgIDxCdXR0b24gdHlwZT1cImJ1dHRvblwiIG9uOmNsaWNrPVwie2Nsb3NlTW9kYWx9XCIgbW9kZT1cIm91dGxpbmVcIj5DYW5jZWw8L0J1dHRvbj5cclxuICAgICAgICA8QnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbjpjbGljaz1cIntzYXZlRm9ybX1cIiBkaXNhYmxlZD1cInshaXNGb3JtVmFsaWR9XCIgPlNhdmU8L0J1dHRvbj5cclxuICAgICAgICB7I2lmIGlkfVxyXG4gICAgICAgICAgICA8QnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbjpjbGljaz1cIntkZWxldGVNZWV0dXB9XCI+RGVsZXRlPC9CdXR0b24+XHJcbiAgICAgICAgey9pZn0gICAgIFxyXG4gICAgPC9kaXY+XHJcbjwvTW9kYWw+IiwiPHNjcmlwdD5cclxuICAgIGltcG9ydCB7IHNsaWRlLGZhZGUgfSBmcm9tIFwic3ZlbHRlL3RyYW5zaXRpb25cIjtcclxuPC9zY3JpcHQ+XHJcbjxzdHlsZT5cclxuICAgIHNwYW57XHJcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgIG1hcmdpbjogMCAwLjI1cmVtO1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjY2YwMDU2IDtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2YwMDU2O1xyXG4gICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgIHBhZGRpbmc6IDAgMC41cmVtO1xyXG4gICAgICAgIGZvbnQtZmFtaWx5OiAnTGF0bycsIHNhbnMtc2VyaWY7XHJcbiAgICAgICAgZm9udC1zaXplOiAwLjhyZW07XHJcbiAgICB9XHJcbjwvc3R5bGU+XHJcbjxzcGFuIHRyYW5zaXRpb246ZmFkZT5cclxuICAgIDxzbG90IC8+XHJcbjwvc3Bhbj4iLCI8c2NyaXB0PlxyXG4gICAgaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vVUkvQnV0dG9uLnN2ZWx0ZVwiO1xyXG4gICAgaW1wb3J0IEJhZGdlIGZyb20gXCIuLi9VSS9CYWRnZS5zdmVsdGVcIjsgICAgXHJcbiAgICBpbXBvcnQgbWVldHVwcyBmcm9tIFwiLi4vLi4vbWVldHVwcy1zdG9yZVwiOyAgIC8vIHN0b3JlXHJcbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSAgZnJvbSBcInN2ZWx0ZVwiOyAgICBcclxuXHJcbiAgICBleHBvcnQgbGV0IGlkO1xyXG4gICAgZXhwb3J0IGxldCB0aXRsZTtcclxuICAgIGV4cG9ydCBsZXQgc3VidGl0bGU7XHJcbiAgICBleHBvcnQgbGV0IGltZ1VSTDtcclxuICAgIGV4cG9ydCBsZXQgZGVzY3JpcHRpb247XHJcbiAgICBleHBvcnQgbGV0IGFkZHJlc3M7ICAgIFxyXG4gICAgZXhwb3J0IGxldCBpc0ZhdjtcclxuXHJcbiAgICBsZXQgaXNGYXZvcml0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcclxuXHJcbiAgICBmdW5jdGlvbiB0b2dnbGVGYXZvcml0ZSgpe1xyXG4gICAgICBpc0Zhdm9yaXRlSW5Qcm9ncmVzcyA9IHRydWU7XHJcbiAgICAgIGZldGNoKCdodHRwczovL3N2ZWx0ZS1jb3Vyc2UtMjBjNWUtZGVmYXVsdC1ydGRiLmZpcmViYXNlaW8uY29tL21lZXR1cHMvJyArIGlkICsnLmpzb24nLCB7XHJcbiAgICAgICAgICBtZXRob2Q6ICdQQVRDSCcsICAgIC8vIHN5bnRheCBmb3IgZmlyZWJhc2UgdG8gdXBkYXRlIGV4aXN0aW5nIHJlY29yZC5cclxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtpc0Zhdm9yaXRlOiAhaXNGYXZ9KSxcclxuICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6XCJhcHBsaWNhdGlvbi9qc29uXCIgfVxyXG4gICAgICB9KS50aGVuKCByZXMgPT57XHJcbiAgICAgICAgICBpZiAoICFyZXMub2sgKXtcclxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJIVFRQIFVwZGF0ZSBGYXZvcml0ZSBNZWV0dXAgRXJyb3JcIik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpc0Zhdm9yaXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgbWVldHVwcy51cGRhdGVGYXZvcml0ZShpZCk7ICAgIC8vIExvY2FsIHN0b3JlIHVwZGF0ZVxyXG4gICAgICB9KS5jYXRjaCggZXJyID0+e1xyXG4gICAgICAgIGlzRmF2b3JpdGVJblByb2dyZXNzID0gZmFsc2U7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyAoZXJyKVxyXG4gICAgICB9KTsgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xyXG4gICAgZnVuY3Rpb24gc2hvd0RldGFpbCgpe1xyXG4gICAgICBkaXNwYXRjaChcInNob3dEZXRhaWxcIixpZCk7XHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG4gICAgYXJ0aWNsZSB7XHJcbiAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMjYpO1xyXG4gICAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xyXG4gICAgICBtYXJnaW46IDFyZW07XHJcbiAgICB9XHJcbiAgXHJcbiAgICBoZWFkZXIsXHJcbiAgICAuY29udGVudCxcclxuICAgIGZvb3RlciB7XHJcbiAgICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgICB9XHJcbiAgXHJcbiAgICAuaW1hZ2Uge1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgaGVpZ2h0OiAxNHJlbTtcclxuICAgIH1cclxuICBcclxuICAgIC5pbWFnZSBpbWcge1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICBvYmplY3QtZml0OiBjb3ZlcjtcclxuICAgIH1cclxuICBcclxuICAgIGgxIHtcclxuICAgICAgZm9udC1zaXplOiAxLjI1cmVtO1xyXG4gICAgICBtYXJnaW46IDAuNXJlbSAwO1xyXG4gICAgICBmb250LWZhbWlseTogXCJSb2JvdG8gU2xhYlwiLCBzYW5zLXNlcmlmO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgXHJcbiAgXHJcbiAgICBoMiB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMXJlbTtcclxuICAgICAgY29sb3I6ICM4MDgwODA7XHJcbiAgICAgIG1hcmdpbjogMC41cmVtIDA7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBwIHtcclxuICAgICAgZm9udC1zaXplOiAxLjI1cmVtO1xyXG4gICAgICBtYXJnaW46IDA7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBkaXYge1xyXG4gICAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuICAgIH1cclxuXHJcbiAgICAuY29udGVudHtcclxuICAgICAgaGVpZ2h0OiA0cmVtOztcclxuICAgIH1cclxuICA8L3N0eWxlPlxyXG5cclxuPGFydGljbGUgaWQ9XCJ7aWR9XCI+XHJcbiAgICA8aGVhZGVyPlxyXG4gICAgICAgIDxoMT5cclxuICAgICAgICAgIHt0aXRsZX1cclxuICAgICAgICAgIHsjaWYgaXNGYXZ9XHJcbiAgICAgICAgICAgIDxCYWRnZT5GQVZPUklURTwvQmFkZ2U+XHJcbiAgICAgICAgICB7L2lmfVxyXG4gICAgICAgIDwvaDE+XHJcbiAgICAgICAgPGgyPntzdWJ0aXRsZX08L2gyPlxyXG4gICAgICAgIDxwPnthZGRyZXNzfTwvcD5cclxuICAgIDwvaGVhZGVyPlxyXG4gICAgPGRpdiBjbGFzcz1cImltYWdlXCI+XHJcbiAgICAgICAgPGltZyBzcmM9XCJ7aW1nVVJMfVwiIGFsdD1cInt0aXRsZX1cIiAvPlxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY29udGVudFwiPlxyXG4gICAgICAgIDxwPntkZXNjcmlwdGlvbn08L3A+ICAgICAgICBcclxuICAgIDwvZGl2PlxyXG4gICAgPGZvb3Rlcj5cclxuICAgICAgICA8QnV0dG9uIG1vZGU9XCJvdXRsaW5lXCIgdHlwZT1cImJ1dHRvblwiIG9uOmNsaWNrPVwieyAoKSA9PiBkaXNwYXRjaCgnZWRpdCcsaWQpIH1cIj5FZGl0PC9CdXR0b24+ICAgICAgICBcclxuICAgICAgICA8IS0tIFxyXG4gICAgICAgICAgICBvbjpjbGljayBldmVudCBoYW5kbGVyIHRyaWdnZXJzL2Rpc3BhdGNoIHRoZSBjdXN0b20gZXZlbnQgJ3RvZ2dlcmxGYXZvcml0ZScgYWxvbmcgd2l0aCAnaWQnIHZhbHVlXHJcbiAgICAgICAgLS0+XHJcbiAgICAgICAgPEJ1dHRvbiBcclxuICAgICAgICAgIG1vZGU9XCJvdXRsaW5lXCIgXHJcbiAgICAgICAgICBjb2xvcj1cIntpc0ZhdiA/IG51bGwgOiAnc3VjY2Vzcyd9XCIgXHJcbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCIgXHJcbiAgICAgICAgICBsb2FkaW5nSWNvbj1cIntpc0Zhdm9yaXRlSW5Qcm9ncmVzc31cIlxyXG4gICAgICAgICAgb246Y2xpY2s9XCJ7dG9nZ2xlRmF2b3JpdGV9XCIgPlxyXG4gICAgICAgICAge2lzRmF2ID8gJ1VuZmF2b3JpdGUnIDogJ0Zhdm9yaXRlJ31cclxuICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICA8QnV0dG9uIHR5cGU9XCJidXR0b25cIiBocmVmPVwiL3tpZH1cIj5TaG93IERldGFpbDwvQnV0dG9uPlxyXG4gICAgPC9mb290ZXI+XHJcbjwvYXJ0aWNsZT4iLCI8c2NyaXB0PlxyXG4gICAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gIGZyb20gXCJzdmVsdGVcIjtcclxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XHJcbiAgICBcclxuICAgIGxldCBzZWxlY3RlZEZpbHRlckJ0biA9IDA7XHJcbiAgICBmdW5jdGlvbiBmaWx0ZXJfYWxsKCl7XHJcbiAgICAgICAgc2VsZWN0ZWRGaWx0ZXJCdG4gPSAwO1xyXG4gICAgICAgIGRpc3BhdGNoKCdmaWx0ZXJieScsc2VsZWN0ZWRGaWx0ZXJCdG4pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGZpbHRlcl9mYXZvcml0ZXMoKXtcclxuICAgICAgICBzZWxlY3RlZEZpbHRlckJ0biA9IDE7XHJcbiAgICAgICAgZGlzcGF0Y2goJ2ZpbHRlcmJ5JyxzZWxlY3RlZEZpbHRlckJ0bik7XHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG4gICAgZGl2IHtcclxuICAgIGZvbnQtc2l6ZTogMHB4O1xyXG4gICAgfVxyXG5cclxuICAgIGJ1dHRvbiB7XHJcbiAgICBiYWNrZ3JvdW5kOiAjYWFhYWFhO1xyXG4gICAgZm9udDogaW5oZXJpdDtcclxuICAgIGZvbnQtc2l6ZTogMXJlbTtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNhYWFhYWE7XHJcbiAgICBwYWRkaW5nOiAwLjVyZW0gMXJlbTtcclxuICAgIH1cclxuXHJcbiAgICBidXR0b246Zm9jdXMge1xyXG4gICAgb3V0bGluZTogbm9uZTtcclxuICAgIH1cclxuXHJcbiAgICBidXR0b246Zmlyc3Qtb2YtdHlwZSB7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1cHggMCAwIDVweDtcclxuICAgIH1cclxuXHJcbiAgICBidXR0b246bGFzdC1vZi10eXBlIHtcclxuICAgIGJvcmRlci1yYWRpdXM6IDAgNXB4IDVweCAwO1xyXG4gICAgfVxyXG5cclxuICAgIGJ1dHRvbjpob3ZlcixcclxuICAgIGJ1dHRvbjphY3RpdmUsXHJcbiAgICAuYWN0aXZlIHtcclxuICAgIGJhY2tncm91bmQ6ICNjZjAwNTY7XHJcbiAgICBib3JkZXItY29sb3I6ICNjZjAwNTY7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICB9XHJcblxyXG48L3N0eWxlPlxyXG48ZGl2PlxyXG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgb246Y2xpY2s9XCJ7ZmlsdGVyX2FsbH1cIiBjbGFzczphY3RpdmU9XCJ7IHNlbGVjdGVkRmlsdGVyQnRuID09IDB9XCI+QWxsPC9idXR0b24+XHJcbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbjpjbGljaz1cIntmaWx0ZXJfZmF2b3JpdGVzfVwiIGNsYXNzOmFjdGl2ZT1cInsgc2VsZWN0ZWRGaWx0ZXJCdG4gPT0gMX1cIj5GYXZvcml0ZXM8L2J1dHRvbj5cclxuPC9kaXY+IiwiPHNjcmlwdD5cclxuICAgIGV4cG9ydCBsZXQgbWVzc2FnZT1cIlwiO1xyXG48L3NjcmlwdD5cclxuPHN0eWxlPlxyXG4gICAgLmxvYWRpbmdDb250YWluZXJ7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgIG1hcmdpbjogMnJlbTtcclxuICAgICAgICBoZWlnaHQ6IDUwdmg7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC5sb2FkaW5nQ29udGFpbmVyIHB7ICAgICAgICBcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgdG9wOiA1MCU7XHJcbiAgICAgICAgbGVmdDogNTAlO1xyXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xyXG4gICAgICAgIGNvbG9yOiAjY2YwMDU2XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIENTUyBmcm9tIGh0dHBzOi8vbG9hZGluZy5pby9jc3MvICovXHJcbiAgICAubGRzLWRlZmF1bHQge1xyXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgd2lkdGg6IDgwcHg7XHJcbiAgICAgICAgaGVpZ2h0OiA4MHB4O1xyXG4gICAgfVxyXG4gICAgLmxkcy1kZWZhdWx0IGRpdiB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIHdpZHRoOiA2cHg7XHJcbiAgICAgICAgaGVpZ2h0OiA2cHg7XHJcbiAgICAgICAgYmFja2dyb3VuZDogI2NmMDA1NjtcclxuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgICAgICAgYW5pbWF0aW9uOiBsZHMtZGVmYXVsdCAxLjJzIGxpbmVhciBpbmZpbml0ZTtcclxuICAgIH1cclxuICAgIC5sZHMtZGVmYXVsdCBkaXY6bnRoLWNoaWxkKDEpIHtcclxuICAgICAgICBhbmltYXRpb24tZGVsYXk6IDBzO1xyXG4gICAgICAgIHRvcDogMzdweDtcclxuICAgICAgICBsZWZ0OiA2NnB4O1xyXG4gICAgfVxyXG4gICAgLmxkcy1kZWZhdWx0IGRpdjpudGgtY2hpbGQoMikge1xyXG4gICAgICAgIGFuaW1hdGlvbi1kZWxheTogLTAuMXM7XHJcbiAgICAgICAgdG9wOiAyMnB4O1xyXG4gICAgICAgIGxlZnQ6IDYycHg7XHJcbiAgICB9XHJcbiAgICAubGRzLWRlZmF1bHQgZGl2Om50aC1jaGlsZCgzKSB7XHJcbiAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiAtMC4ycztcclxuICAgICAgICB0b3A6IDExcHg7XHJcbiAgICAgICAgbGVmdDogNTJweDtcclxuICAgIH1cclxuICAgIC5sZHMtZGVmYXVsdCBkaXY6bnRoLWNoaWxkKDQpIHtcclxuICAgICAgICBhbmltYXRpb24tZGVsYXk6IC0wLjNzO1xyXG4gICAgICAgIHRvcDogN3B4O1xyXG4gICAgICAgIGxlZnQ6IDM3cHg7XHJcbiAgICB9XHJcbiAgICAubGRzLWRlZmF1bHQgZGl2Om50aC1jaGlsZCg1KSB7XHJcbiAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiAtMC40cztcclxuICAgICAgICB0b3A6IDExcHg7XHJcbiAgICAgICAgbGVmdDogMjJweDtcclxuICAgIH1cclxuICAgIC5sZHMtZGVmYXVsdCBkaXY6bnRoLWNoaWxkKDYpIHtcclxuICAgICAgICBhbmltYXRpb24tZGVsYXk6IC0wLjVzO1xyXG4gICAgICAgIHRvcDogMjJweDtcclxuICAgICAgICBsZWZ0OiAxMXB4O1xyXG4gICAgfVxyXG4gICAgLmxkcy1kZWZhdWx0IGRpdjpudGgtY2hpbGQoNykge1xyXG4gICAgICAgIGFuaW1hdGlvbi1kZWxheTogLTAuNnM7XHJcbiAgICAgICAgdG9wOiAzN3B4O1xyXG4gICAgICAgIGxlZnQ6IDdweDtcclxuICAgIH1cclxuICAgIC5sZHMtZGVmYXVsdCBkaXY6bnRoLWNoaWxkKDgpIHtcclxuICAgICAgICBhbmltYXRpb24tZGVsYXk6IC0wLjdzO1xyXG4gICAgICAgIHRvcDogNTJweDtcclxuICAgICAgICBsZWZ0OiAxMXB4O1xyXG4gICAgfVxyXG4gICAgLmxkcy1kZWZhdWx0IGRpdjpudGgtY2hpbGQoOSkge1xyXG4gICAgICAgIGFuaW1hdGlvbi1kZWxheTogLTAuOHM7XHJcbiAgICAgICAgdG9wOiA2MnB4O1xyXG4gICAgICAgIGxlZnQ6IDIycHg7XHJcbiAgICB9XHJcbiAgICAubGRzLWRlZmF1bHQgZGl2Om50aC1jaGlsZCgxMCkge1xyXG4gICAgICAgIGFuaW1hdGlvbi1kZWxheTogLTAuOXM7XHJcbiAgICAgICAgdG9wOiA2NnB4O1xyXG4gICAgICAgIGxlZnQ6IDM3cHg7XHJcbiAgICB9XHJcbiAgICAubGRzLWRlZmF1bHQgZGl2Om50aC1jaGlsZCgxMSkge1xyXG4gICAgICAgIGFuaW1hdGlvbi1kZWxheTogLTFzO1xyXG4gICAgICAgIHRvcDogNjJweDtcclxuICAgICAgICBsZWZ0OiA1MnB4O1xyXG4gICAgfVxyXG4gICAgLmxkcy1kZWZhdWx0IGRpdjpudGgtY2hpbGQoMTIpIHtcclxuICAgICAgICBhbmltYXRpb24tZGVsYXk6IC0xLjFzO1xyXG4gICAgICAgIHRvcDogNTJweDtcclxuICAgICAgICBsZWZ0OiA2MnB4O1xyXG4gICAgfVxyXG4gICAgQGtleWZyYW1lcyBsZHMtZGVmYXVsdCB7XHJcbiAgICAgMCUsIDIwJSwgODAlLCAxMDAlIHtcclxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgfVxyXG4gICAgNTAlIHtcclxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEuNSk7XHJcbiAgICB9XHJcbiAgICB9XHJcblxyXG48L3N0eWxlPlxyXG5cclxuPGRpdiBjbGFzcz1cImxvYWRpbmdDb250YWluZXJcIj5cclxuICAgIDwhLS0gSFRNTCBGUk9NIGh0dHBzOi8vbG9hZGluZy5pby9jc3MvIC0tPlxyXG4gICAgPGRpdiBjbGFzcz1cImxkcy1kZWZhdWx0XCI+XHJcbiAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICA8ZGl2PjwvZGl2PlxyXG4gICAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICA8ZGl2PjwvZGl2PlxyXG4gICAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICA8ZGl2PjwvZGl2PlxyXG4gICAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICA8ZGl2PjwvZGl2PlxyXG4gICAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICA8L2Rpdj4gICAgXHJcbiAgICA8cD57bWVzc2FnZX08L3A+XHJcbjwvZGl2PlxyXG4iLCI8IS0tXHJcbiAgICAgICAgPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+IFxyXG4gICAgICAgICAgICBUaGUgc2NyaXB0IHJ1bnMgZmlyc3QgYW5kbiBmZXRjaGVzIHRoZSBkYXRhIGZpcnN0XHJcbiAgICAgICAgICAgIEl0IGhvbGRzIG9mIHJlbmRlcmluZyB0aGUgY29tcG9uZW50IHVudGlsIHRoZSBwcm9taXNlIHJldHVybmVkIGJ5IHRoZSBmZXRjaCBpcyByZXNvbHZlZC5cclxuICAgICAgICAgICAgT25jZSB0aGUgcHJvbWlzZSBpcyByZXNvbHZlLCBpdCBzZW5kcyBhbiBvYmplY3QgdG8gdGhlIGNvbXBvbmVudCBhcyBwcm9wIHdoaWNoIGNhbiB0aGVuIGJlIHV0aWxpc2VkIGluIHRoZSBjb21wb25lbnQuXHJcbiAgICAgICAgPC9zY3JpcHQ+XHJcbi0tPlxyXG48c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBwcmVsb2FkKHBhZ2Upe1xyXG4gICAgICAgIC8vY29uc29sZS5sb2cgKHBhZ2UpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKCdodHRwczovL3N2ZWx0ZS1jb3Vyc2UtMjBjNWUtZGVmYXVsdC1ydGRiLmZpcmViYXNlaW8uY29tL21lZXR1cHMuanNvbicpXHJcblx0XHQudGhlbihyZXMgPT4ge1x0XHRcclxuXHRcdFx0aWYgKCFyZXMub2spe1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIkZldGNoIE1lZXR1cCBEYXRhIGZhaWxlZCFcIik7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gcGFyc2UgdGhlIGpzb24gdG8gamF2YXNjcmlwdCBvYmplY3QgYW5kIGFsc28gcmV0dXJucyB0aGUgcHJvbWlzZVx0dG8gdGhlIG5leHQgdGhlbiBjbGFzZVxyXG5cdFx0XHRyZXR1cm4gcmVzLmpzb24oKTtcdFxyXG5cdFx0fSkudGhlbihkYXRhID0+e1x0XHRcdFxyXG5cdFx0XHRjb25zdCBmZXRjaGVkTWVldHVwcyA9IFtdO1xyXG5cdFx0XHRmb3IgKGxldCBrZXkgaW4gZGF0YSl7XHRcdFx0XHRcdFx0XHRcdFxyXG4gICAgICAgICAgICAgICAgZmV0Y2hlZE1lZXR1cHMucHVzaCh7IGlkOiBrZXksLi4uZGF0YVtrZXldfSk7XHJcblx0XHRcdH0gICAgICAgICBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIE9iamVjdCB3aWxsIHJldHVybiB0byB0aGlzIGNvbXBvbmVudHMgaW50byBmZXRjaGVkTWVldHVwcyB2YXJpYWJsZSB1c2luZyAnZXhwb3J0IGxldCBmZXRjaGVkTWVldHVwcycgLSBsaW5lIDQxICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4geyBmZXRjaGVkTWVldHVwczogZmV0Y2hlZE1lZXR1cHMucmV2ZXJzZSgpIH07XHJcbiAgICAgICAgICAgIFxyXG5cdFx0fSkuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgaHR0cEVycm9yID0gZXJyO1xyXG4gICAgICAgICAgICBpc0xvYWRpbmcgPSBmYWxzZTtcdFx0XHJcblx0XHRcdGNvbnNvbGUubG9nICggZXJyICk7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3IoNTAwLCAnQ3VzdG9tIEVycm9yIE1lc2FnZSAtIGNvdWxkIG5vdCBmZXRjaCBtZWV0dXBzIGRhdGEnKTsgLy8gRXJyb3IgcGFnZSAoX2Vycm9yLnN2ZWx0ZSlcclxuXHRcdH0pO1xyXG4gICAgfSAgIFxyXG5cclxuPC9zY3JpcHQ+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgaW1wb3J0IEVkaXRNZWV0dXAgZnJvbSBcIi4uL2NvbXBvbmVudHMvTWVldHVwcy9FZGl0TWVldHVwLnN2ZWx0ZVwiO1xyXG4gICAgaW1wb3J0IE1lZXR1cEl0ZW0gZnJvbSBcIi4uL2NvbXBvbmVudHMvTWVldHVwcy9NZWV0dXBJdGVtLnN2ZWx0ZVwiO1xyXG4gICAgaW1wb3J0IEZpbHRlcmVkTWVldHVwIGZyb20gXCIuLi9jb21wb25lbnRzL01lZXR1cHMvRmlsdGVyZWRNZWV0dXAuc3ZlbHRlXCI7XHJcbiAgICBpbXBvcnQgQnV0dG9uIGZyb20gXCIuLi9jb21wb25lbnRzL1VJL0J1dHRvbi5zdmVsdGVcIjtcclxuICAgIGltcG9ydCBMb2FkaW5nU3Bpbm5lciBmcm9tIFwiLi4vY29tcG9uZW50cy9VSS9Mb2FkaW5nU3Bpbm5lci5zdmVsdGVcIjtcclxuICAgIGltcG9ydCBtZWV0dXBzIGZyb20gXCIuLi8uLi9zcmMvbWVldHVwcy1zdG9yZS5qc1wiOyAgIC8vIHN0b3JlXHJcbiAgICBpbXBvcnQgeyBvbk1vdW50LCBvbkRlc3Ryb3kgfSBmcm9tIFwic3ZlbHRlXCI7XHJcbiAgICBpbXBvcnQgeyBzY2FsZSB9IGZyb20gXCJzdmVsdGUvdHJhbnNpdGlvblwiO1xyXG4gICAgaW1wb3J0IHsgZmxpcCB9IGZyb20gXCJzdmVsdGUvYW5pbWF0ZVwiO1xyXG5pbXBvcnQgQmFkZ2UgZnJvbSBcIi4uL2NvbXBvbmVudHMvVUkvQmFkZ2Uuc3ZlbHRlXCI7XHJcbiAgICBcclxuICAgIC8vcmVjZWl2ZXMgZGF0YSBhcyBwYWdlIHByb3AgZnJvbSA8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj4gLi4uIHJldHVybiB7IGZldGNoZWRNZWV0dXBzOiBmZXRjaGVkTWVldHVwcy5yZXZlcnNlKCkgfSAgIGZyb20gbGluZSAxXHJcbiAgICBleHBvcnQgbGV0IGZldGNoZWRNZWV0dXBzO1xyXG4gICAgXHJcbiAgICBsZXQgZmF2T25seSA9IGZhbHNlOyAgICBcclxuICAgIGZ1bmN0aW9uIGZpbHRlck1lZXR1cHMoZXZlbnQpe1xyXG4gICAgICAgIGZhdk9ubHkgPSBldmVudC5kZXRhaWwgPT09IDE7XHJcbiAgICB9XHJcblxyXG4gICAgJDogZmlsdGVyZWRNZWV0dXBzTGlzdCA9ICggZmF2T25seSApID8gIGxvYWRlZE1lZXR1cHMuZmlsdGVyKCBpdGVtID0+IGl0ZW0uaXNGYXZvcml0ZSApIDogbG9hZGVkTWVldHVwcztcclxuXHJcbiAgICBsZXQgZWRpdE1vZGUgPSBudWxsOyBcclxuICAgIGxldCBlZGl0SUQgPSBudWxsOyAgXHJcbiAgICBsZXQgaXNMb2FkaW5nID0gZmFsc2U7XHJcbiAgICBsZXQgbG9hZGVkTWVldHVwcyA9IFtdO1xyXG4gICAgbGV0IHVuc3Vic2NyaWJlO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmVkTWVldHVwKCl7ICAgICAgICAgXHJcbiAgICAgICAgZWRpdE1vZGUgPSBudWxsOyAgICAgICAgXHJcbiAgICAgICAgZWRpdElEID0gbnVsbDtcclxuICAgIH0gICAgXHJcblxyXG4gICAgZnVuY3Rpb24gY2FuY2VsRWRpdCgpe1xyXG4gICAgICAgIGVkaXRNb2RlID0gbnVsbDtcclxuICAgICAgICBlZGl0SUQgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHN0YXJ0QWRkKCl7XHJcbiAgICAgICAgZWRpdE1vZGUgPSAnZWRpdCc7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZWRpdE1lZXR1cChldmVudCl7XHJcbiAgICAgICAgZWRpdE1vZGUgPSBcImVkaXRcIjtcclxuICAgICAgICBlZGl0SUQgPSBldmVudC5kZXRhaWw7XHJcbiAgICB9XHJcblxyXG4gICAgb25Nb3VudCggKCkgPT4ge1xyXG4gICAgICAgIHVuc3Vic2NyaWJlID0gbWVldHVwcy5zdWJzY3JpYmUoIGl0ZW1zID0+IHsgbG9hZGVkTWVldHVwcyA9IGl0ZW1zIH0pO1xyXG4gICAgICAgIG1lZXR1cHMuc2V0TWVldHVwcyhmZXRjaGVkTWVldHVwcyk7XHJcbiAgICB9KTsgICAgICAgIFxyXG5cclxuICAgIG9uRGVzdHJveSggKCkgPT4ge1xyXG4gICAgICAgIGlmICh1bnN1YnNjcmliZSkgdW5zdWJzY3JpYmUoKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG4gICAgI21lZXR1cHMge1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XHJcbiAgICAgICAgZ3JpZC1nYXA6IDFyZW07XHJcbiAgICB9XHJcblxyXG4gICAgI21lZXR1cC1jb250cm9sc3tcclxuICAgICAgICBtYXJnaW46IDFyZW07XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcblxyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkge1xyXG4gICAgICAgICNtZWV0dXBzIHtcclxuICAgICAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMiwgMWZyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLm5vLW1lc3NhZ2V7XHJcbiAgICAgICAgbWFyZ2luOiAxcmVtO1xyXG4gICAgfVxyXG5cclxuPC9zdHlsZT5cclxuXHJcbjxzdmVsdGU6aGVhZD5cclxuXHQ8dGl0bGU+QWxsIE1lZXR1cHM8L3RpdGxlPlxyXG48L3N2ZWx0ZTpoZWFkPlxyXG5cclxueyNpZiBlZGl0TW9kZSA9PT0gJ2VkaXQnfVxyXG4gICAgPEVkaXRNZWV0dXAgaWQ9XCJ7ZWRpdElEfVwiIG9uOnNhdmVNZWV0dXA9XCJ7c2F2ZWRNZWV0dXB9XCIgb246Y2FuY2VsTW9kYWw9XCJ7Y2FuY2VsRWRpdH1cIiAvPiAgICBcclxuey9pZn0gICAgICBcclxuXHJcbnsjaWYgaXNMb2FkaW5nfVxyXG4gICAgPExvYWRpbmdTcGlubmVyIG1lc3NhZ2U9XCJGZXRjaGluZyBNZWV0dXBzIERhdGFcIi8+XHJcbns6ZWxzZX1cclxuICAgIDxzZWN0aW9uIGlkPVwibWVldHVwLWNvbnRyb2xzXCI+XHJcbiAgICAgICAgPEZpbHRlcmVkTWVldHVwIG9uOmZpbHRlcmJ5PVwie2ZpbHRlck1lZXR1cHN9XCIvPlxyXG4gICAgICAgIDxCdXR0b24gb246Y2xpY2s9XCJ7c3RhcnRBZGR9XCIgPk5ldyBNZWV0dXA8L0J1dHRvbj5cclxuICAgIDwvc2VjdGlvbj5cclxuICAgIDxzZWN0aW9uIGlkPVwibWVldHVwc1wiPiAgXHJcbiAgICAgICAgeyNpZiBmaWx0ZXJlZE1lZXR1cHNMaXN0Lmxlbmd0aD09PTB9XHJcbiAgICAgICAgICAgIDxwIGNsYXNzPVwibm8tbWVzc2FnZVwiPlRoZSBTZXJ2ZXIgaGFzIG5vIG1lZXR1cHMuIFBsZWFzZSBzdGFydCBieSBhZGRpbmcgb25lLjwvcD5cclxuICAgICAgICB7L2lmfVxyXG4gICAgICAgIDwhLS0gXHJcbiAgICAgICAgICAgIG9uOnRvZ2dsZUZhdm9yaXRlIGJlbG93IGxpc3RlbmQgZm9yIGN1c3RvbSBldmVudCAndG9nZ2xlRmF2b3JpdGUnXHJcbiAgICAgICAgLS0+ICBcclxuICAgICAgICB7I2VhY2ggZmlsdGVyZWRNZWV0dXBzTGlzdCBhcyBtZWV0dXAgKG1lZXR1cC5pZCkgfSAgICAgICAgXHJcbiAgICAgICAgICAgIDxkaXYgdHJhbnNpdGlvbjpzY2FsZT1cInt7ZHVyYXRpb246IDMwMH19XCIgYW5pbWF0ZTpmbGlwPlxyXG4gICAgICAgICAgICAgICAgPE1lZXR1cEl0ZW0gXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9e21lZXR1cC5pZH1cclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17bWVldHVwLnRpdGxlfVxyXG4gICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlPXttZWV0dXAuc3VidGl0bGV9XHJcbiAgICAgICAgICAgICAgICAgICAgaW1nVVJMPXttZWV0dXAuaW1nVVJMfVxyXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPXttZWV0dXAuZGVzY3JpcHRpb259XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzcz17bWVldHVwLmFkZHJlc3N9XHJcbiAgICAgICAgICAgICAgICAgICAgZW1haWw9e21lZXR1cC5jb250YWN0RW1haWx9XHJcbiAgICAgICAgICAgICAgICAgICAgaXNGYXY9e21lZXR1cC5pc0Zhdm9yaXRlfSAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgb246ZWRpdD17ZWRpdE1lZXR1cH1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIHsvZWFjaH1cclxuICAgIDwvc2VjdGlvbj4gICAgXHJcbnsvaWZ9XHJcblxyXG5cclxuXHJcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFlSSxtQkFBSyxDQUNMLFFBQVEsY0FBQyxDQUFDLEFBQ04sT0FBTyxDQUFFLEtBQUssQ0FDZCxLQUFLLENBQUUsSUFBSSxDQUNYLElBQUksQ0FBRSxPQUFPLENBQ2IsTUFBTSxDQUFFLElBQUksQ0FDWixhQUFhLENBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQzdCLGFBQWEsQ0FBRSxHQUFHLENBQUMs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QUksQ0FBRSxJQUFJLEFBQ2QsQ0FBQyxBQUNELDBCQUFZLENBQUMsaUJBQUcsV0FBVyxDQUFDLENBQUMsQUFBQyxDQUFDLEFBQzNCLGVBQWUsQ0FBRSxLQUFLLENBQ3RCLEdBQUcsQ0FBRSxJQUFJLENBQ1QsSUFBSSxDQUFFLElBQUksQUFDZCxDQUFDLEFBQ0QsMEJBQVksQ0FBQyxpQkFBRyxXQUFXLENBQUMsQ0FBQyxBQUFDLENBQUMsQUFDM0IsZUFBZSxDQUFFLEtBQUssQ0FDdEIsR0FBRyxDQUFFLElBQUksQ0FDVCxJQUFJLENBQUUsR0FBRyxBQUNiLENBQUMsQUFDRCwwQkFBWSxDQUFDLGlCQUFHLFdBQVcsQ0FBQyxDQUFDLEFBQUMsQ0FBQyxBQUMzQixlQUFlLENBQUUsS0FBSyxDQUN0QixHQUFHLENBQUUsSUFBSSxDQUNULElBQUksQ0FBRSxJQUFJLEFBQ2QsQ0FBQyxBQUNELDBCQUFZLENBQUMsaUJBQUcsV0FBVyxDQUFDLENBQUMsQUFBQyxDQUFDLEFBQzNCLGVBQWUsQ0FBRSxLQUFLLENBQ3RCLEdBQUcsQ0FBRSxJQUFJLENBQ1QsSUFBSSxDQUFFLElBQUksQUFDZCxDQUFDLEFBQ0QsMEJBQVksQ0FBQyxpQkFBRyxXQUFXLEVBQUUsQ0FBQyxBQUFDLENBQUMsQUFDNUIsZUFBZSxDQUFFLEtBQUssQ0FDdEIsR0FBRyxDQUFFLElBQUksQ0FDVCxJQUFJLENBQUUsSUFBSSxBQUNkLENBQUMsQUFDRCwwQkFBWSxDQUFDLGlCQUFHLFdBQVcsRUFBRSxDQUFDLEFBQUMsQ0FBQyxBQUM1QixlQUFlLENBQUUsR0FBRyxDQUNwQixHQUFHLENBQUUsSUFBSSxDQUNULElBQUksQ0FBRSxJQUFJLEFBQ2QsQ0FBQyxBQUNELDBCQUFZLENBQUMsaUJBQUcsV0FBVyxFQUFFLENBQUMsQUFBQyxDQUFDLEFBQzVCLGVBQWUsQ0FBRSxLQUFLLENBQ3RCLEdBQUcsQ0FBRSxJQUFJLENBQ1QsSUFBSSxDQUFFLElBQUksQUFDZCxDQUFDLEFBQ0QsV0FBVyx5QkFBWSxDQUFDLEFBQ3ZCLEVBQUUsQ0FBRSxHQUFHLENBQUUsR0FBRyxDQUFFLElBQUksQUFBQyxDQUFDLEFBQ2pCLFNBQVMsQ0FBRSxNQUFNLENBQUMsQ0FBQyxBQUN2QixDQUFDLEFBQ0QsR0FBRyxBQUFDLENBQUMsQUFDRCxTQUFTLENBQUUsTUFBTSxHQUFHLENBQUMsQUFDekIsQ0FBQyxBQUNELENBQUM7QUNSRCxRQUFRLGVBQUMsQ0FBQyxBQUNOLEtBQUssQ0FBRSxJQUFJLENBQ1gsT0FBTyxDQUFFLElBQUksQ0FDYixxQkFBcUIsQ0FBRSxHQUFHLENBQzFCLFFBQVEsQ0FBRSxJQUFJLEFBQ2xCLENBQUMsQUFFRCwrQkFBZ0IsQ0FBQyxBQUNiLE1BQU0sQ0FBRSxJQUFJLENBQ1osT0FBTyxDQUFFLElBQUksQ0FDYixlQUFlLENBQUUsYUFBYSxBQUVsQyxDQUFDLEFBRUQsTUFBTSxBQUFDLFlBQVksS0FBSyxDQUFDLEFBQUMsQ0FBQyxBQUN2QixRQUFRLGVBQUMsQ0FBQyxBQUNOLHFCQUFxQixDQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEFBQ3pDLENBQUMsQUFDTCxDQUFDLEFBRUQsMEJBQVcsQ0FBQyxBQUNSLE1BQU0sQ0FBRSxJQUFJLEFBQ2hCLENBQUMifQ== */